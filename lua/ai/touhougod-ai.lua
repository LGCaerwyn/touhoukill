--【创幻】。。。。。。--【神主】ai 锁定技 不需要--【界线】aisgs.ai_skill_cardask["@jiexiandamage"] = function(self, data)	local target=data:toDamage().to	local damage = data:toDamage()	if not self:isFriend(target) then return "." end	local isSlash = true	if not damage.card or not damage.card:isKindOf("Slash") then		isSlash = false	end	if self:needToLoseHp(target, damage.from, isSlash, true) 	or self:getDamagedEffects(target, damage.from, isSlash) then		return "."	end	if damage.damage == 1 then		if not target:isWounded() then			local overflow = false			if target:objectName() == self.player:objectName() then				overflow = self:getOverflow()+1 >0			else				overflow = self:getOverflow() >1			end			if not overflow then				return "."			end		end	end		local cards=sgs.QList2Table(self.player:getCards("he"))	local ecards={}	for _,card in pairs(cards) do		if card:getSuit()==sgs.Card_Heart then			table.insert(ecards,card)		end	end		if #ecards==0 then return "." end	--self:sortByCardNeed(ecards)	self:sortByKeepValue(ecards)	return "$" .. ecards[1]:getId()endsgs.ai_skill_cardask["@jiexianrecover"] = function(self, data)	local target=data:toPlayer()	if not self:isEnemy(target) then return "." end	cards =self.player:getCards("he") 	cards=sgs.QList2Table(cards)	ecards={}	for _,card in pairs(cards) do		if card:getSuit()==sgs.Card_Spade then			table.insert(ecards,card)		end	end		if #ecards==0 then return "." end	self:sortByCardNeed(ecards)	return "$" .. ecards[1]:getId()endsgs.jiexian_suit_value = {	spade = 6,	heart = 6}sgs.ai_cardneed.jiexian = function(to, card, self)	return card:getSuit()==sgs.Card_Heart or card:getSuit()==sgs.Card_Spadeend--【昼夜】ai 锁定技 不需要--【红雾】ailocal hongwu_skill = {}hongwu_skill.name = "hongwu"table.insert(sgs.ai_skills, hongwu_skill)function hongwu_skill.getTurnUseCard(self)    if self.player:getMark("@ye")>0 then return nil end    local handcards = sgs.QList2Table(self.player:getCards("he"))    if #handcards==0 then return nil end	self:sortByUseValue(handcards)	local hearts={}--考虑神枪	local diamonds={}	for _,c in pairs(handcards) do		if c:getSuit()== sgs.Card_Heart then			table.insert(hearts,c)		elseif c:getSuit()== sgs.Card_Diamond then			table.insert(diamonds,c)		end	end	if #hearts + #diamonds<2 then return nil end	local use_cards={}	if #diamonds>0 then		local n1=1		while (#use_cards<=#diamonds and #use_cards<2)do			table.insert(use_cards,diamonds[n1]:getId())			n1=n1+1		end	end	if #use_cards<2  then		local n1=1		while (#use_cards<2)do			table.insert(use_cards,hearts[n2]:getId())			n2=n2+1		end	end	return sgs.Card_Parse("@hongwuCard=" .. table.concat(use_cards, "+") )endsgs.ai_skill_use_func.hongwuCard=function(card,use,self)--sgs.ai_skill_use_func["#hongwu"]=function(card,use,self)	use.card = cardendsgs.ai_use_priority.hongwuCard = 7.6sgs.ai_cardneed.hongwu = function(to, card, self)	return card:isRed()end--【神枪】ailocal shenqiang_skill = {}shenqiang_skill.name = "shenqiang"table.insert(sgs.ai_skills, shenqiang_skill)function shenqiang_skill.getTurnUseCard(self)    if self.player:getMark("@ye")==0 then return nil end    local handcards = sgs.QList2Table(self.player:getCards("he"))    if #handcards==0 then return nil end	self:sortByUseValue(handcards)	reds={}	for _,c in pairs(handcards) do		if c:getSuit()==sgs.Card_Heart or c:isKindOf("Weapon") then			table.insert(reds,c)		end	end	if #reds==0 then return nil end	--return sgs.Card_Parse("#shenqiang:" .. reds[1]:getId() .. ":")	return sgs.Card_Parse("@shenqiangCard=" .. reds[1]:getId())endsgs.ai_skill_use_func.shenqiangCard = function(card, use, self)--sgs.ai_skill_use_func["#shenqiang"] = function(card, use, self)        if #self.enemies==0 then return false end		self:sort(self.enemies,"hp")        		use.card = card         if use.to then				use.to:append(self.enemies[1])				if use.to:length() >= 1 then return end		endendsgs.ai_cardneed.shenqiang = function(to, card, self)	return card:getSuit()==sgs.Card_Heart or card:isKindOf("Weapon")endsgs.ai_use_priority.shenqiangCard = 7.6--【夜王】ai 锁定技 不需要--function SmartAI:slashIsEffectivesgs.ai_damageInflicted.yewang=function(self,damage)	if damage.to:getMark("@ye") then		damage.damage=damage.damage-1	end	return damageend--雷米也需要花色--【奥义】ai --1修改fan_skill.getTurnUseCard 冰杀会导致ai发动朱雀羽扇--2 SmartAI:useCardIceSlashsgs.ai_skill_choice.aoyi=function(self)	local friend_wizzard= self:invokeTouhouJudge()	local _data = sgs.QVariant()   	for _,p in pairs (self.friends) do		if p:containsTrick("supply_shortage") or p:containsTrick("indulgence") then			_data:setValue(p)			self.player:setTag("aoyi_thrower",_data)			return "aoyi2"		end	end	if not friend_wizzard then		for _,p in sgs.qlist(self.room:getAlivePlayers()) do			if p:containsTrick("lightning") then				_data:setValue(p)				self.player:setTag("aoyi_thrower",_data)				return "aoyi2"			end		end	end	if  not self.player:isWounded() then		for _,p in pairs (self.enemies) do			if self.player:canDiscard(p,"e") then				_data:setValue(p)				self.player:setTag("aoyi_thrower",_data)				return "aoyi2"			end		end	end	return "aoyi1"endsgs.ai_skill_playerchosen.aoyi = function(self, targets)	local target=self.player:getTag("aoyi_thrower")	if target then return target end	return targets:first()endsgs.ai_skill_cardchosen.aoyi = function(self, who, flags)	local id = self:askForCardChosen(who, "ej", "dismantlement", sgs.Card_MethodDiscard)	if id>-1 then		return sgs.Sanguosha:getCard(id)	end	return who:getCards("ej"):first()endsgs.ai_choicemade_filter.cardChosen.aoyi =sgs.ai_choicemade_filter.cardChosen.dismantlement--keepvalue--[[sgs.aoyi_keep_value = {	Slash = 7, 	TrickCard = 8}]]sgs.ai_cardneed.aoyi = function(to, card, self)	return  card:isNDTrick()endsgs.ai_use_value.IceSlash = 6.5sgs.ai_keep_value.IceSlash = 6.6sgs.ai_use_priority.IceSlash = 5.6--【失控】ai 锁定技 不需要--需要使用杀的ai吧sgs.ai_cardneed.shikong = function(to, card, self)	if not self:willSkipPlayPhase(to) then		return  (not to:getWeapon() and  getCardsNum("Weapon",to,self.player)<1 and card:isKindOf("Weapon"))		or (not to:getOffensiveHorse() and  getCardsNum("OffensiveHorse",to,self.player)<1 and card:isKindOf("OffensiveHorse"))	endend--【熔毁】ai 锁定技 不需要--对于卖血流要有是否需要保住装备的判断函数吧--【聚变】ai 锁定技 不需要--【恒星】ai 锁定技 不需要--【幻梦】ai 锁定技 不需要-- 1 各种aoe 技能 导致的不必要的出杀 闪--修改了standard_cards-ai.lua里sgs.ai_skill_cardask.aoe --再影响cardask["savage-assault-slash"]--SmartAI:aoeIsEffective--function SmartAI:hasTrickEffective(card, to, from)--SmartAI:slashIsEffective--还要禁止兵粮 铁锁 --优先拆 优先顺  其他可以破坏手牌的角色优先选择萃香--【萃想】aisgs.ai_skill_askforag.cuixiang = function(self, card_ids)    local ids = card_ids	local cards = {}	for _, id in ipairs(ids) do		table.insert(cards, sgs.Sanguosha:getCard(id))	end	local needcards ={}	for _, card in ipairs(cards) do		--拿闪		if self.player:hasSkill("xuying") and sgs.ai_cardneed.xuying(self.player, card, self) then			return card:getEffectiveId() 		end		if sgs.dynamic_value.damage_card[card:getClassName()] then			table.insert(needcards, card)		end		--if card:isKindOf("Jink")  then 		--	table.insert(needcards, card)		--end		--只会拿桃子救主		if card:isKindOf("Peach") then 			lord = self.room:getLord()			if lord and lord:isAlive() and self:isFriend(lord) and not self.player:isLord() then				table.insert(needcards, card)			end		end		if card:isKindOf("ExNihilo") then 			table.insert(needcards, card)		end		if card:isKindOf("Weapon") and self:getCardsNum("Weapon")==0 then			table.insert(needcards, card)		end		if card:isKindOf("Armor") and not card:isKindOf("SilverLion")		and self:getCardsNum("Armor")==0 then			table.insert(needcards, card)		end	end		if #needcards>0 then		self:sortByCardNeed(needcards)		return needcards[#needcards]:getEffectiveId() 	end	self:sortByCardNeed(cards)	return cards[#cards]:getEffectiveId() end--【虚影】ai --[[相关aiSmartAI:isPriorFriendOfSlash]]sgs.ai_skill_discard.xuying = sgs.ai_skill_discard.gamerulesgs.ai_cardneed.xuying = function(to, card, self)	return getCardsNum("Jink", to, self.player) <2	 and card:isKindOf("Jink")end--【狂宴】aisgs.ai_skill_invoke.kuangyan = function(self,data)	if self.player:getMark("@kinki")>0 then return true end	current=self.room:getCurrent()	if self:isFriend(current) and current:getHp()<3 then		return false	end	return trueendsgs.ai_slash_prohibit.kuangyan = function(self, from, to, card)	if to:hasSkill("kuangyan")  and to:getHp()==1 then		local current=self.room:getCurrent()		if  current:isAlive()  and self:isEnemy(current,to)  then 			if self:isFriend(from,to) then				return false			else				return true			end		end	end	return falseend--【毁灭】ailocal huimie_skill = {}huimie_skill.name = "huimie"table.insert(sgs.ai_skills, huimie_skill)function huimie_skill.getTurnUseCard(self)	if self.player:hasUsed("huimieCard") then return nil end	return sgs.Card_Parse("@huimieCard=.")endsgs.ai_skill_use_func.huimieCard = function(card, use, self)--sgs.ai_skill_use_func["#huimie"] = function(card, use, self)        self:sort(self.enemies,"hp",true)        targets={}		for _, p in ipairs(self.enemies) do            if not p:isChained()  then    				table.insert(targets,p)			end        end		if #targets >0 then			use.card = card            if use.to then				use.to:append(targets[1])				if use.to:length() >= 1 then return end			end        endend--【禁果】ai--function SmartAI:isWeaksgs.ai_skill_discard.jinguo = sgs.ai_skill_discard.gameruleshicao_find_adjacent = function(room,target) 	local lefter	for _,p in sgs.qlist(room:getOtherPlayers(target)) do		if target:isAdjacentTo(p) then			if target:getSeat()-p:getSeat()==1 then				lefter =p			end			if p:getSeat()-target:getSeat()==room:getOtherPlayers(target):length() then				lefter=p			end		end	end	return lefterendfunction shijian_attack(self)	for _,p in pairs (self.enemies) do		if self:isWeak(p) and self:canAttack(p) then			return true		end	end	return falseend--【时操】ai --【时停】aisgs.ai_skill_invoke.shiting = function(self,data)	local current=self.room:getCurrent() 	if current:hasSkill("changshi") then return true end	local lefter=shicao_find_adjacent(self.room,self.player)	if current:objectName()==lefter:objectName() then		return true	end	if self:isWeak(self.player) then return true end	return shijian_attack(self) end--【幻在】aisgs.ai_skill_invoke.huanzai = function(self,data)	if self:isWeak(self.player) then return true end	return shijian_attack(self) end--【伤魂】aisgs.ai_skill_invoke.shanghun = function(self,data)	if self:isWeak(self.player) then return true end	return shijian_attack(self) end--【半灵】aisgs.ai_skill_choice.banling_plus=function(self, choices)	local x=self.player:getMark("lingtili")	local y=self.player:getMark("rentili")	if x>y then		return "rentili"	end	return "lingtili"end-- 特别需要注意minus为一次性分配，，，sgs.ai_skill_choice.banling_minus=function(self, choices)	local lose=self.player:getTag("banling_minus"):toInt()	local tmp=self.player:getTag("banling_minus_choice"):toString()	if tmp=="rentili" then			tmp= "lingtili"	elseif tmp=="lingtili" then			tmp= "rentili"	else 		local x=self.player:getMark("lingtili")		local y=self.player:getMark("rentili")		if x<y then			tmp= "rentili"		else			tmp= "lingtili"		end	end		if tmp=="rentili" then		self.room:setPlayerMark(self.player,"banling_minus_rentili",self.player:getMark("banling_minus_rentili")+1)	else		self.room:setPlayerMark(self.player,"banling_minus_lingtili",self.player:getMark("banling_minus_lingtili")+1)	end		if self.player:getMark("banling_minus_rentili")+self.player:getMark("banling_minus_lingtili")>=lose then		self.player:removeTag("banling_minus_choice")		self.room:setPlayerMark(self.player,"banling_minus_rentili",0)		self.room:setPlayerMark(self.player,"banling_minus_lingtili",0)	else		local tag = sgs.QVariant(tmp)				self.player:setTag("banling_minus_choice",tag)	end	return tmpend--【人鬼】ai--保持合适血量--function getBestHp(player)--[[sgs.ai_skill_use["@@rengui"] = function(self, prompt)	self:sort(self.friends,"handcard") 	return "#rengui:.:->" .. self.friends[1]:objectName()end]]sgs.ai_skill_playerchosen.renguidiscard = function(self, targets)	target_table = sgs.QList2Table(targets)	if #target_table==0 then return nil end	self:sort(target_table, "handcard")	for _,target in pairs(target_table) do			if self:isEnemy(target) then			return target		end	end	return nilendsgs.ai_skill_playerchosen.renguidraw = function(self, targets)	self:sort(self.friends,"handcard")	return self.friends[1]end--sgs.ai_card_intention.rengui = -50sgs.ai_playerchosen_intention.renguidraw = -60sgs.ai_playerchosen_intention.renguidiscard = 60--【凝视】ai --[[sgs.ai_skill_discard.ningshi = function(self, discard_num, min_num, optional, include_equip)	local to_discard = {}	if self:touhouHpLocked(self.player) then		return to_discard	end	end	]]--【高傲】ai 锁定技sgs.ai_trick_prohibit.gaoao = function(self, from, to, card)	if not card:isKindOf("DelayedTrick")  then return false end	if self:isFriend(from,to) then return false end	--回合内可能被【船难】【葛笼】	return to:getPhase() == sgs.Player_NotActiveend--【神授】ai   choices--sgs.ai_card_intention.Slashsgs.ai_skill_choice.shenshou=function(self, choices)	local x=self.player:getTag("shenshou_x"):toInt()	local y=self.player:getTag("shenshou_y"):toInt()	local z=self.player:getTag("shenshou_z"):toInt()	local target=self.player:getTag("shenshou_target"):toPlayer()	local e={}	local e1={}	for _,p in sgs.qlist(self.room:getOtherPlayers(target)) do		if not self:isFriend(p) and target:inMyAttackRange(p) then			table.insert(e,p)			if target:canSlash(p,nil,true) then				table.insert(e1,p)			end		end	end	if z>0 then		return "shenshou_draw"	end	if y>0 then		if #e>0 then return "shenshou_obtain" end	end	if x>0 then		if #e1>0 then return "shenshou_slash" end	end	return "cancel"endlocal shenshou_skill = {}shenshou_skill.name = "shenshou"table.insert(sgs.ai_skills, shenshou_skill)function shenshou_skill.getTurnUseCard(self)	if self.player:hasUsed("shenshouCard") then return nil end	local handcards = sgs.QList2Table(self.player:getHandcards())	self:sortByUseValue(handcards)	local cards={}	for _,card in pairs (handcards) do		if card:getNumber()<10 and card:getNumber()>4 then			table.insert(cards,card)		end	end	for _,card in pairs (handcards) do		if (card:isKindOf("Slash") or card:getSuit()==sgs.Card_Spade)and not table.contains(cards,card) then			table.insert(cards,card)		end	end	if #cards>0 then		--return sgs.Card_Parse("#shenshou:" .. cards[1]:getEffectiveId() .. ":")		return sgs.Card_Parse("@shenshouCard=" .. cards[1]:getEffectiveId() )	end	if #handcards>0 then		--return sgs.Card_Parse("#shenshou:" .. handcards[1]:getEffectiveId() .. ":")		return sgs.Card_Parse("@shenshouCard=" .. handcards[1]:getEffectiveId())	end	return nil endsgs.ai_skill_use_func.shenshouCard = function(card, use, self)--sgs.ai_skill_use_func["#shenshou"] = function(card, use, self)        self:sort(self.friends_noself,"handcard")		if #self.friends_noself >0 then			use.card = card            if use.to then				use.to:append(self.friends_noself[1])				if use.to:length() >= 1 then return end			end        endendsgs.ai_skill_playerchosen.shenshou = function(self, targets)	targets=sgs.QList2Table(targets)	self:sort(targets,"hp")	local shenshou	for _,p in pairs(targets) do		if self:isEnemy(p) then			shenshou=p		end	end	if shenshou then		return shenshou	end	return nilendsgs.shenshou_suit_value = {	spade = 5}sgs.ai_playerchosen_intention.shenshou = 40sgs.ai_use_value.shenshouCard = 9.2sgs.ai_use_priority.shenshouCard = 9.2--应该是一个动态值sgs.ai_cardneed.shenshou = function(to, card, self)	if not self:willSkipPlayPhase(to) then		return  card:isKindOf("Slash") or card:getSuit()==sgs.Card_Spade 		or (card:getNumber()>4 and card:getNumber()<9)	endend--【结界】ailocal jiejie_skill = {}jiejie_skill.name = "jiejie"table.insert(sgs.ai_skills, jiejie_skill)jiejie_skill.getTurnUseCard = function(self)	if self.player:hasUsed("#jiejie") then return nil end	local handcards = sgs.QList2Table(self.player:getHandcards())    self:sortByUseValue(handcards)		return sgs.Card_Parse("#jiejie:" .. handcards[1]:getEffectiveId() .. ":")endsgs.ai_skill_use_func["#jiejie"] = function(card, use, self)        targets={}		self:sort(self.enemies, "threat")		for _, p in ipairs(self.enemies) do			table.insert(targets,p)			break        end		self:sort(self.friends, "hp")		for _, p in ipairs(self.friends) do			table.insert(targets,p)			break        end		if #targets >1 then			use.card = card            if use.to then				use.to:append(targets[1])				if use.to:length() >= 1 then return end			end        endend--【封印】aisgs.ai_skill_cardask["@fengyin-discard"] = function(self, data)	targets={}	for _,p in sgs.qlist(self.room:getAlivePlayers())do		if p:getMark("@in_jiejie")>0 and self:isEnemy(p) then			table.insert(targets,p)		end	end	if #targets==0 then return "." end		cards =self.player:getCards("he") 	cards=sgs.QList2Table(cards)	ecards={}	for _,card in pairs(cards) do		if card:getSuit()==sgs.Card_Heart then			table.insert(ecards,card)		end	end		if #ecards==0 then return "." end	self:sortByCardNeed(ecards)	local _data = sgs.QVariant()    _data:setValue(targets[1])	self.player:setTag("fengyin_target",_data)	return "$" .. ecards[1]:getId()endsgs.ai_skill_playerchosen.reimu_fengyin = function(self, targets)	local target=self.player:getTag("fengyin_target"):toPlayer()	self.player:removeTag("fengyin_target")	if target then	return target	end	return nilendsgs.reimu_fengyin_suit_value = {	heart = 5}--【劝诫】aisgs.ai_skill_invoke.quanjie = function(self,data)	local target=data:toPlayer()	if self:isEnemy(target) then		if target:getHandcardNum()<5 then			for _,p in sgs.qlist(self.room:getAlivePlayers()) do				if self:isFriend(p) and self:isWeak(p) and target:inMyAttackRange(p) then					return true				end			end		end	end	return falseend--【断罪】ai  sgs.ai_skill_invoke.duanzui = true --【化龙】ai 觉醒技sgs.ai_needToWake.hualong=function(self,player)	return "Dying","Unknown"end--【乱舞】ailocal meilingluanwu_skill = {}meilingluanwu_skill.name = "meilingluanwu"table.insert(sgs.ai_skills, meilingluanwu_skill)meilingluanwu_skill.getTurnUseCard = function(self, inclusive)        if not sgs.Slash_IsAvailable(self.player)  then return false end		local flag		if self.player:getMark("hualong") > 0 then			flag="he"		else			flag="h"		end		local cards = self.player:getCards(flag)		cards=self:touhouAppendExpandPileToList(self.player,cards)		local reds={}		local blacks={}				cards = sgs.QList2Table(cards)		if #cards==0 then return false end		self:sortByUseValue(cards, true)		if self.player:getMark("hualong") == 0 then				for _,c in pairs(cards) do				if c:isKindOf("Slash") then				--只考虑了不浪费杀，没有考虑一些特殊功用：				--1.红杀仁王，2.只有属性杀，想用非属性杀					return false				end				if c:isBlack() then					table.insert(blacks,c)				else					table.insert(reds,c)				end			end			if #reds>1 then				self:sortByUseValue(reds, true)			end			if #blacks>1 then				self:sortByUseValue(blacks, true)			end		end		        if self.player:getMark("hualong") > 0 then				local suit = cards[1]:getSuitString()                local number = cards[1]:getNumberString()                local card_id = cards[1]:getEffectiveId()                local slash_str = ("slash:meilingluanwu[%s:%s]=%d"):format(suit, number, card_id)                local slash = sgs.Card_Parse(slash_str)                                assert(slash)                return slash		else			local card = sgs.CardList()			local hualongcards				if #reds>1 and reds[1]==cards[1] then				hualongcards=reds			elseif  #blacks>1 and blacks[1]==cards[1] then				hualongcards=blacks			else				return false				end            for p=1,2,1 do                card:append(hualongcards[p])            end			local slash = sgs.cloneCard("slash",sgs.Card_SuitToBeDecided, 0)            slash:addSubcards(card)            slash:setSkillName("meilingluanwu")            assert(slash)			return slash        endendsgs.ai_view_as.meilingluanwu = function(card, player, card_place)	local pattern=sgs.Sanguosha:getCurrentCardUsePattern()	if player:getMark("hualong") > 0 then		local suit = card:getSuitString()		local number = card:getNumberString()		local card_id = card:getEffectiveId()		if card_place ~= sgs.Player_PlaceSpecial then			if pattern=="jink" then				return ("jink:meilingluanwu[%s:%s]=%d"):format(suit, number, card_id)			elseif pattern=="slash" then				return ("slash:meilingluanwu[%s:%s]=%d"):format(suit, number, card_id)			end		end	else  		local cards = player:getCards("he")        cards = sgs.QList2Table(cards)		--self:sortByUseValue(cards, true)		if #cards==0 then return nil end		local reds={}		local blacks={}		for _,c in pairs(cards) do			if c:isBlack() then				table.insert(blacks,c)			else				table.insert(reds,c)			end		end		--if #reds>1 then		--	self:sortByUseValue(reds, true)		--end		--if #blacks>1 then		--	self:sortByUseValue(blacks, true)		--end		local tmpcards ={}		local hualongcards			if #reds>1 and reds[1]==cards[1] then			hualongcards=reds		elseif  #blacks>1 and blacks[1]==cards[1] then				hualongcards=blacks		else			return false			end        for p=1,2,1 do            table.insert(tmpcards,hualongcards[p])           end		if pattern=="jink" then				local first_id = tmpcards[1]:getId()			local second_id = tmpcards[2]:getId()			return ("jink:meilingluanwu[%s:%s]=%d+%d"):format("to_be_decided", 0, first_id, second_id)		elseif pattern=="slash" then			local first_id = tmpcards[1]:getId()			local second_id = tmpcards[2]:getId()			return ("slash:meilingluanwu[%s:%s]=%d+%d"):format("to_be_decided", 0, first_id, second_id)					end	end	end--【龙威】ai sgs.ai_skill_invoke.longwei = function(self,data)	local target=data:toPlayer()	if target and self:isEnemy(target) then		return true	end	return falseend--【千年】ai 觉醒技 不需要--【侵略】ai--askforcard类仇恨sgs.ai_choicemade_filter.cardResponded["@qinlue-discard"] = function(self, player, promptlist)	if promptlist[#promptlist] ~= "_nil_" then		local current=self.room:getCurrent()		sgs.updateIntention(player, current, 80)	endendsgs.ai_skill_cardask["@qinlue-discard"] = function(self, data)	local current = data:toPlayer()		if not self:isEnemy(current)  then return "." end	local cards={}		for _,c in sgs.qlist(self.player:getCards("he")) do		if c:isKindOf("Slash") or c:isKindOf("EquipCard") then			if self.player:canDiscard(self.player,c:getId()) then				table.insert(cards,c)			end		end	end	if #cards==0 then return "." end	self:sortByKeepValue(cards)	return "$" .. cards[1]:getId()end--侵略对策ai默认弃闪 sgs.ai_cardneed.qinlue = function(to, card, self)	if not self:willSkipPlayPhase(to) then		return  card:isKindOf("Slash") or card:isKindOf("EquipCard") 	endendsgs.qinlue_keep_value = {	Slash 			= 7.4,	EquipCard = 6.5}--【超人】--[[相关aiSmartAI:useBasicCardsgs.ai_skill_cardask["duel-slash"]]]local chaoren_skill = {}chaoren_skill.name = "chaoren"table.insert(sgs.ai_skills, chaoren_skill)chaoren_skill.getTurnUseCard = function(self, inclusive)        local acard = sgs.Sanguosha:getCard(self.room:getDrawPile():first())  		if not acard:isAvailable(self.player) then return false end		local suit =acard:getSuitString()		local number = acard:getNumberString()		local card_id = acard:getEffectiveId()        local slash_str = (acard:objectName()..":chaoren[%s:%s]=%d"):format(suit, number, card_id) 			local slash = sgs.Card_Parse(slash_str)                        assert(slash)        return slash		end--[[sgs.ai_view_as.chaoren = function(card, player, card_place)	local room=player:getRoom()	local acard = sgs.Sanguosha:getCard(room:getDrawPile():first())  	local suit =acard:getSuitString()	local number = acard:getNumberString()    local card_id = acard:getEffectiveId()		return (acard:objectName()..":chaoren[%s:%s]=%d"):format(suit, number, card_id) 	end]]function sgs.ai_cardsview_valuable.chaoren(self, class_name, player)	local acard = sgs.Sanguosha:getCard(self.room:getDrawPile():first())  	if not acard then return nil end	local suit =acard:getSuitString()	local number = acard:getNumberString()    local card_id = acard:getEffectiveId()	--杀包含属性杀 所以单独分开	if class_name == "Slash" and acard:isKindOf("Slash") then		return (acard:objectName()..":chaoren[%s:%s]=%d"):format(suit, number, card_id) 	end	if acard:isKindOf(class_name) then		return (acard:objectName()..":chaoren[%s:%s]=%d"):format(suit, number, card_id) 	endend--【表象】ai 觉醒技--【释放】ai 觉醒技 --【抑制】ai 觉醒技 sgs.ai_needToWake.yizhi=function(self,player)	--神恋的三个觉醒技调整。。。	return "Dying","Unknown"end--【自我】ailocal ziwo_skill = {}ziwo_skill.name = "ziwo"table.insert(sgs.ai_skills, ziwo_skill)ziwo_skill.getTurnUseCard = function(self)	if not self.player:isWounded() then return nil end	cards =sgs.QList2Table(self.player:getCards("h"))	if #cards<2 then return nil end	self:sortByKeepValue(cards)	use_cards={}	table.insert(use_cards,cards[1]:getId())	table.insert(use_cards,cards[2]:getId())	return sgs.Card_Parse("@ziwoCard=" .. table.concat(use_cards, "+") )	--return sgs.Card_Parse("#ziwo:" .. table.concat(use_cards, "+") .. ":")	--return sgs.Card_Parse("#ziwo:.:")endsgs.ai_skill_use_func.ziwoCard=function(card,use,self)--sgs.ai_skill_use_func["#ziwo"]=function(card,use,self)	use.card = cardend--【本我】aisgs.ai_skill_invoke.benwo = function(self,data)	local target=self.player:getTag("benwo_target"):toPlayer()	if not target then return true end	if self:isFriend(target) then		return false	else		return true	endend--麻痹 ai居然可以不弃牌。。。sgs.ai_skill_discard.benwo = function(self, discard_num, min_num, optional, include_equip)	local to_discard = {}	local cards = self.player:getCards("he")	cards = sgs.QList2Table(cards)	self:sortByKeepValue(cards)	local num=math.min(#cards,discard_num)	for var=1, num ,1 do		table.insert(to_discard, cards[var]:getEffectiveId())	end	return to_discardend--【超我】ai--[[sgs.ai_skill_cardask["chaowo"] = function(self)        local cards = sgs.QList2Table(self.player:getCards("h"))		self:sortByKeepValue(cards)        return "$" .. cards[1]:getId()end]]--[[sgs.ai_skill_playerchosen.chaowo = function(self, targets)	target_table = self:getFriends(self.player)	if #target_table==0 then return false end	self:sort(target_table, "value")	for _,target in pairs(target_table) do			if  target:getMaxHp()==3 then			return target		end		if self:isWeak(target) and not self:isWeak(self.player) then			return target		end	end	return self.playerend]]sgs.ai_skill_use["@@chaowo"] = function(self, prompt)	local target	target_table = self:getFriends(self.player)	if #target_table==0 then return "." end	self:sort(target_table, "value")	for _,p in pairs(target_table) do			if  p:getMaxHp()==3 then			 target=p		end		if self:isWeak(p) and not self:isWeak(self.player) then			 target=p		end	end	if not target then		target= self.player	end	if target  then		local cards = self.player:getHandcards()		cards = sgs.QList2Table(cards)		self:sortByKeepValue(cards)		--return "#chaowo:" ..cards[1]:getEffectiveId().. ":->" .. target:objectName()		return "@chaowoCard=" ..cards[1]:getEffectiveId().. "->" .. target:objectName()	end	return "."end--sgs.ai_playerchosen_intention.chaowo = -60sgs.ai_card_intention.chaowoCard = -60--嘲讽值设定--[[sgs.ai_chaofeng.shen000 = 5  --zun 你必须高嘲讽 sgs.ai_chaofeng.shen001 = 2sgs.ai_chaofeng.shen002 = 1sgs.ai_chaofeng.shen003 = -1sgs.ai_chaofeng.shen004 = 2sgs.ai_chaofeng.shen005 = 4sgs.ai_chaofeng.shen006 = 1sgs.ai_chaofeng.shen007 = 0sgs.ai_chaofeng.shen008 = 0sgs.ai_chaofeng.shen009 = 2sgs.ai_chaofeng.shen010 = 2sgs.ai_chaofeng.shen011 = 0sgs.ai_chaofeng.shen012 = 0sgs.ai_chaofeng.shen013 = -1sgs.ai_chaofeng.shen014 = 1sgs.ai_chaofeng.shen015 = 0sgs.ai_chaofeng.shen016 = 1sgs.ai_chaofeng.shen017 = -2]]