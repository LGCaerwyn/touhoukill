--【永恒】ai 锁定技不需要--修改 SmartAI:getLeastHandcardNum(player)--进而影响 SmartAI:hasLoseHandcardEffective(player)--进而影响SmartAI:doNotDiscard--五谷相关--【竹取】aisgs.ai_skill_playerchosen.zhuqu = function(self, targets)	target_table =sgs.QList2Table(targets)	if #target_table==0 then return false end	for _,target in pairs(target_table) do			if  self:isFriend(target) then			return target			--break		end	end	return nilendsgs.ai_playerchosen_intention.zhuqu = -80--【睿智】aisgs.ai_skill_invoke.ruizhi  = function(self)	return self:invokeTouhouJudge()end--改判系在场满血主动卖sgs.ai_need_damaged.ruizhi = function(self, attacker, player)	if not attacker then return end	if player:getHp()<player:getMaxHp() then return end	effect=self.player:getTag("ruizhi_effect"):toCardEffect()	if not effect or not effect.card  then return end	local damageTrick=false	if effect.card:isKindOf("Duel") or effect.card:isKindOf("FireAttack") or		effect.card:isKindOf("SavageAssault") or effect.card:isKindOf("ArcheryAttack") then		damageTrick=true	end	--判定人员的还需要细化	if damageTrick and not self:needtouhouDamageJudge()  then		return false 	end	if damageTrick and self:touhouDamage(effect.card,effect.from,effect.to) >=2 then		return false	end		return damageTrickend--【秘药】ailocal miyao_skill = {}miyao_skill.name = "miyao"table.insert(sgs.ai_skills, miyao_skill)function miyao_skill.getTurnUseCard(self)    if self.player:hasUsed("#miyao") then return nil end    return sgs.Card_Parse("#miyao:.:")endsgs.ai_skill_use_func["#miyao"] = function(card, use, self)        local kaguya		local friendtarget		self:sort(self.friends_noself,"hp")        for _, p in ipairs(self.friends_noself) do            if self:touhouHandCardsFix(p) then				kaguya=p			end			if p:isWounded() and not p:isKongcheng() then    				friendtarget=p				break			end        end				sgs.ai_use_priority.miyao = friendtarget and 3 or 8				if friendtarget then			use.card = card			if use.to then				use.to:append(friendtarget)				if use.to:length() >= 1 then return end			end		end		self:sort(self.enemies,"handcard")        for _, p in ipairs(self.enemies) do            if (not p:isWounded()) and (not p:isKongcheng()) 			and not  self:touhouHandCardsFix(p) then    				use.card = card                if use.to then                        use.to:append(p)                        if use.to:length() >= 1 then return end                end			end        end		if kaguya then 			use.card = card            if use.to then                use.to:append(kaguya)                if use.to:length() >= 1 then return end            end		endendsgs.ai_use_value.miyao = 10sgs.ai_card_intention.miyao = function(self, card, from, to)	--to是table？	if to[1]:isWounded() then		sgs.updateIntentions(from, to, -90)	else		if self:touhouHandCardsFix(to[1]) then			sgs.updateIntentions(from, to, -10)		else			sgs.updateIntentions(from, to, 40)		end	endendsgs.ai_skill_discard.miyao = function(self)	local to_discard = {}	local cards = self.player:getHandcards()	cards = sgs.QList2Table(cards)	self:sortByKeepValue(cards)	table.insert(to_discard, cards[1]:getEffectiveId())	return to_discardend--【不灭】ai 锁定技 不需要--但是需要写一些策略--修改smart-ai下SmartAI:damageIsEffective(to, nature, from)--保证1血时的敌人对策--function SmartAI:isWeak--【历战】aifunction lizhan_slash(player,objectName)	local ids=player:getTag("lizhan"):toIntList()	for _,id in sgs.qlist(ids) do									local card = sgs.Sanguosha:getCard(id)		if objectName=="notNatureSlash" then			if not card:isKindOf("NatureSlash") then				return id			end		else			if (card:isKindOf(objectName)) then 												return id			end		end			end	return -1endsgs.ai_skill_invoke.lizhan = function(self)	local target=self.player:getTag("lizhan_target"):toPlayer()	if target and self:isEnemy(target)  then		return true	end	if target and self:isFriend(target)  then		if target:hasSkill("xxsyyzwushou") and target:getHp()<=3 		and target:hasArmorEffect("Vine") then			id=lizhan_slash(self.player,"notNatureSlash")			if id ~=-1 then				return true			end		end	end	return falseendsgs.ai_skill_askforag.lizhan = function(self, card_ids)	local target=self.player:getTag("lizhan_target"):toPlayer()	--目前对友军只有【无寿】	if target and self:isFriend(target)  then		return lizhan_slash(self.player,"notNatureSlash")	end	--不能直接引用useslash来自动选择id么。。。	local id= lizhan_slash(self.player,"FireSlash")	if id ~=-1 then		return id	end	id= lizhan_slash(self.player,"ThunderSlash")	if id ~=-1 then		return id	end	return card_ids[1]end--【狂躁】ailocal kuangzao_skill = {}kuangzao_skill.name = "kuangzao"table.insert(sgs.ai_skills, kuangzao_skill)function kuangzao_skill.getTurnUseCard(self)	if self.player:hasUsed("#kuangzao") then return nil end    return sgs.Card_Parse("#kuangzao:.:")endsgs.ai_skill_use_func["#kuangzao"] = function(card, use, self)		slash=sgs.Sanguosha:cloneCard("slash")		self:sort(self.enemies,"handcard")        for _, p in ipairs(self.enemies) do			if p:inMyAttackRange(self.player) then				if (getCardsNum("Slash", p, self.player) < 1 				or sgs.card_lack[p:objectName()]["Slash"] == 1) or 				(self:getCardsNum("Jink") >0 and  math.abs(self:touhouCanHuanshi(slash,p,self.player))>0)then				--if self:isTiaoxinTarget(p) then					use.card = card					if use.to then                        use.to:append(p)                        if use.to:length() >= 1 then return end					end				end			end        endendsgs.ai_use_value.kuangzao = 8sgs.ai_use_priority.kuangzao = 0sgs.ai_card_intention.kuangzao = 50--【幻视】ai--幻视的仇恨值还得修改--1function SmartAI:isPriorFriendOfSlash--2修改sgs.ai_card_intention.Slash 队友利用幻视扩大杀伤面时，仇恨为0--目前幻视很强--目前被莲子坑了sgs.ai_skill_use["@@easthuanshi"] = function(self, prompt)	local use=self.player:getTag("huanshi_source"):toCardUse()	local s=use.from	local targets={}    for _, p in sgs.qlist(self.room:getOtherPlayers(self.player)) do        if s:canSlash(p,use.card,true) and s:objectName()~=p:objectName() 		and not use.to:contains(p) and  s:inMyAttackRange(p)  then			if self:isEnemy(p) then				table.insert(targets,p:objectName())			end			if self:isFriend(s) and s:hasSkills("sidie|lizhi") then				if self:isFriend(p) then					table.insert(targets,p:objectName())				end			end		end    end		 		if #targets ==0 then return "."	 end	return "#easthuanshi:.:->" .. table.concat(targets, "+")--targets[1]:objectName()endsgs.ai_card_intention.easthuanshi = function(self, card, from, to)	local use=from:getTag("huanshi_source"):toCardUse()	local s=use.from	if s:hasSkills("sidie|lizhi") and self:isFriend(s,from)then		for _,p in pairs (to) do			if self:isFriend(p,from) then			else				sgs.updateIntention(from, p, 50)			end		end	else		sgs.updateIntentions(from, to, 50)	endendsgs.ai_slash_prohibit.easthuanshi = function(self, from, to, card)	if to:hasSkill("easthuanshi") then		if self:touhouCanHuanshi(card, from, to)>0 then			return false		end		if self:touhouCanHuanshi(card, from, to)==0 then			if self:isEnemy(from,to) and self:isWeak(to) then				return false			end		end		return true	end	return falseend--【欺诈】ai  不好推敲。。。。--由出牌阶段用 改成了askforusecard版--[[local qizha_skill = {}qizha_skill.name = "qizha"table.insert(sgs.ai_skills, qizha_skill)function qizha_skill.getTurnUseCard(self)    if self.player:hasUsed("#qizha") then return nil end    local handcards = sgs.QList2Table(self.player:getHandcards())    self:sortByUseValue(handcards)	return sgs.Card_Parse("#qizha:" .. handcards[1]:getEffectiveId() .. ":")endsgs.ai_skill_use_func["#qizha"] = function(card, use, self)        self:sort(self.enemies,"handcard")        targets={}		for _, p in ipairs(self.enemies) do            if not p:isKongcheng()  then    				table.insert(targets,p)			end        end		if #targets >1 then			use.card = card            if use.to then				use.to:append(targets[1])				use.to:append(targets[2])				if use.to:length() >= 2 then return end			end        endend]]sgs.ai_skill_use["@@qizha"] = function(self, prompt)	local handcards = sgs.QList2Table(self.player:getHandcards())    self:sortByUseValue(handcards)	if #handcards==0 then return "." end		self:sort(self.enemies,"handcard")    targets={}	for _, p in ipairs(self.enemies) do        if not p:isKongcheng()  then    			table.insert(targets,p:objectName())		end		if #targets==2 then			break		end    end	if #targets >1 then		return "#qizha:".. handcards[1]:getId() ..":->" .. table.concat(targets, "+")	end	return "."	 endsgs.ai_card_intention.qizha = 50--【幸运】aisgs.ai_skill_invoke.yfd_xingyun = truesgs.ai_skill_choice.yfd_xingyun="recover"sgs.ai_skill_playerchosen.yfd_xingyun = function(self, targets)	target_table = self:getFriends(self.player)	if #target_table==0 then return false end	local xingyun_target	self:sort(target_table, "handcard")		for _,target in pairs(target_table) do			--if self:isFriend(target) then		if not xingyun_target then			xingyun_target=target		else			if self:isWeak(target) and (not self:isWeak(xingyun_target)) then				xingyun_target=target			end		end	end	if xingyun_target  then		return xingyun_target	end	return nilendsgs.ai_playerchosen_intention.yfd_xingyun = -60sgs.yfd_xingyun_suit_value = {	heart = 4.8}--【歌声】ailocal gesheng_skill = {}gesheng_skill.name = "gesheng"table.insert(sgs.ai_skills, gesheng_skill)gesheng_skill.getTurnUseCard = function(self, inclusive)		if self.player:hasFlag("gesheng") then return nil end		if self.player:isNude() then return nil end		local cards = self.player:getCards("h")		for _,c in sgs.qlist(self.player:getCards("e")) do			if  c:isKindOf("DefensiveHorse") and self.player:hasSkill("yemang") then			else				cards:append(c)			end		end		if cards:length()==0 then return nil end		        cards = sgs.QList2Table(cards)        self:sortByUseValue(cards, true)		        if cards[1] then				local suit = cards[1]:getSuitString()                local number = cards[1]:getNumberString()                local card_id = cards[1]:getEffectiveId()                local str = ("indulgence:gesheng[%s:%s]=%d"):format(suit, number, card_id)                local indl = sgs.Card_Parse(str)                                assert(indl)                return indl        endendsgs.ai_use_value.gesheng = 7sgs.ai_use_priority.gesheng = sgs.ai_use_priority.Indulgence -0.1--【夜盲】ai  禁止技 不需要--【荧光】ai--getCardsNum 预估闪的数量sgs.ai_skill_invoke.yingguang = truelocal yingguang_skill = {}yingguang_skill.name = "yingguang"table.insert(sgs.ai_skills, yingguang_skill)function yingguang_skill.getTurnUseCard(self)    if self.player:getMark("@yingguang")>0 then return nil end	cards=self.player:getCards("h")	diamonds={}	for _,card in sgs.qlist(cards) do		if card:getSuit()==sgs.Card_Diamond then			table.insert(diamonds,card)		end	end		if #diamonds==0  then 		return nil 	else		self:sortByCardNeed(diamonds,true)		return sgs.Card_Parse("#yingguang:" .. diamonds[1]:getEffectiveId() .. ":")	endendsgs.ai_skill_use_func["#yingguang"]=function(card,use,self)	use.card = cardendsgs.ai_use_value.yingguang = 10sgs.ai_use_priority.yingguang =7sgs.yingguang_suit_value = {	diamond = 4.9}--【恙虫】ai--sgs.ai_armor_value.EightDiagram sgs.ai_skill_playerchosen.yangchong = function(self, targets)	target_table = self:getEnemies(self.player)	if #target_table==0 then return nil end	local yangchong_target	self:sort(target_table, "value")		for _,target in pairs(target_table) do			if self:touhouHandCardsFix(target) then			continue		end		if (not yangchong_target) and target:getHandcardNum() <=2 then			yangchong_target=target		end		if self:isWeak(target) then			yangchong_target=target			break		end	end	if yangchong_target  then		return yangchong_target	else		return target_table[1]	endend--加仇恨不考虑主动让人空城么？？？sgs.ai_playerchosen_intention.yangchong = 60function yangchong_discard(self, discard_num, min_num, optional, include_equip, skillName)	local xiahou = self.room:findPlayerBySkillName(skillName)	--if xiahou and (not self:damageIsEffective(self.player, sgs.DamageStruct_Normal, xiahou) or self:getDamagedEffects(self.player, xiahou)) then return {} end	--if xiahou and  self:needToLoseHp(self.player, xiahou) then return {} end	local to_discard = {}	local cards = sgs.QList2Table(self.player:getHandcards())	local index = 0	local all_peaches = 0	for _, card in ipairs(cards) do		if isCard("Peach", card, self.player) then			all_peaches = all_peaches + 1		end	end	if all_peaches >= 2 and self:getOverflow() <= 0 then return {} end	self:sortByKeepValue(cards)	cards = sgs.reverse(cards)	for i = #cards, 1, -1 do		local card = cards[i]		if not isCard("Peach", card, self.player) and not self.player:isJilei(card) then			table.insert(to_discard, card:getEffectiveId())			table.remove(cards, i)			index = index + 1			if index == 2 then break end		end	end	if #to_discard < 2 then return {}	else		return to_discard	endend--基本照搬“刚烈”sgs.ai_skill_discard.yangchong = function(self, discard_num, min_num, optional, include_equip)	return yangchong_discard(self, discard_num, min_num, optional, include_equip, "yangchong")endsgs.ai_slash_prohibit.yangchong = function(self, from, to, card)	if self:isFriend(from,to) then		return false	end	if getCardsNum("Jink", to, from) >0 or ( to:hasSkill("yingguang") and to:getMark("@yingguang")>0) then		if from:hasWeapon("Axe") and from:getCards("he"):length()>=2 then			return false		end		return true	end	return falseend--【创史】ai  --card:setSkillName("_chuangshi")--ai更新仇恨值--sgs.ai_card_intention.Duelsgs.ai_skill_playerchosen.chuangshi = function(self, targets)	if self.player:getMark("chuangshi")>0 then return nil end	--先要判断场上形势	--目前只考虑两种情况，离间类  和 助人类	if #self.friends_noself>0 then		self:sort(self.friends_noself, "hp")		for _,p in pairs(self.friends_noself) do			if self:isWeak(p) and p:isWounded() then --hp上限为1时也是weak				self.player:setTag("chuangshi_mode",sgs.QVariant("save"))				return p			end		end	end	local weaker	local attacker	if #self.enemies>0 then		self:sort(self.enemies, "hp")		for _,p in pairs(self.enemies) do			if self:isWeak(p) then						weaker=p				break			end		end	end	if weaker then		local _data=sgs.QVariant()		_data:setValue(weaker)		self.player:setTag("chuangshi_victim",_data)		self:sort(self.friends_noself, "handcard",true)		if #self.friends_noself>0 then 			self.player:setTag("chuangshi_mode",sgs.QVariant("kill1"))			_data=sgs.QVariant()			_data:setValue(self.friends_noself[1])			self.player:setTag("chuangshi_attacker",_data)			return self.friends_noself[1]		end	end	if #self.enemies>1 then		self.player:setTag("chuangshi_mode",sgs.QVariant("kill2"))		_data=sgs.QVariant()		_data:setValue(self.enemies[2])		self.player:setTag("chuangshi_attacker",_data)		if not weaker then			_data=sgs.QVariant()			_data:setValue(self.enemies[1])			self.player:setTag("chuangshi_victim",_data)		end		return self.enemies[2]	end	return nilendsgs.ai_skill_choice.chuangshi= function(self)	--目前还没有考虑到被选中者不能使用杀和决斗时的情况	local str=self.player:getTag("chuangshi_mode"):toString()	self.player:removeTag("chuangshi_mode")	if str =="save" then return "peach" end	if str =="kill1" then 		local killer=self.player:getTag("chuangshi_attacker"):toPlayer()		local target=self.player:getTag("chuangshi_victim"):toPlayer()		self.player:removeTag("chuangshi_attacker")		if killer:canSlash(target,nil,true) then			return "fire_slash"		else			return "duel"		end	end	if str =="kill2" then 		self.player:removeTag("chuangshi_attacker")		return "duel"	endendsgs.ai_skill_use["@@chuangshi"] = function(self, prompt)	local target=self.player:getTag("chuangshi_victim"):toPlayer()	if target then		return "#chuangshiCard:.:->" .. target:objectName()	else		return "."	endend--[[sgs.ai_skill_playerchosen.chuangshi_victim = function(self, targets)	local target=self.player:getTag("chuangshi_victim"):toPlayer()	self.player:removeTag("chuangshi_victim")	return targetend]]local chuangshi_filter = function(self, player, carduse)	if carduse.card:getSkillName(true)=="chuangshi" then		sgs.ai_chuangshi_effect = true	endend--【望月】aisgs.ai_skill_invoke.wangyue =function(self,data)	local target=self.player:getTag("wangyue_target"):toPlayer()	if target and self:isEnemy(target) then		return true	end	return falseendsgs.ai_choicemade_filter.skillInvoke.wangyue = function(self, player, promptlist)	local damage = self.room:getTag("CurrentDamageStruct"):toDamage()	local from=damage.from	if from:getHandcardNum()>player:getHp() then		if promptlist[#promptlist] == "yes" then			sgs.updateIntention(player, from, 60)		else			sgs.updateIntention(player, from, -60)		end	endendsgs.ai_need_damaged.wangyue = function(self, attacker, player)	if not attacker then return end	if attacker:hasSkill("#wuniantr") then return false end	--if self:getDamagedEffects(attacker, player) then return self:isFriend(attacker, player) end	if  self:isEnemy(attacker) then		if player:getLostHp()>0 then--目前只卖第一滴血			return false		else			if attacker:getHandcardNum() >= 5  and not self:touhouDrawCardsInNotActive(attacker) then				return true					end		end	end	return falseend--【护卫】ai   --还有viewas部分的没写sgs.ai_skill_invoke.tymh_huwei = truesgs.ai_skill_playerchosen.tymh_huwei = function(self, targets)	local huwei_target	local kaguya	self:sort(self.friends_noself, "handcard")	for _,target in pairs(self.friends_noself) do			if (not huwei_target) then			huwei_target=target		end		if self:isWeak(target) and (target:getHandcardNum()<3 or huwei_target:getHandcardNum()>target:getHandcardNum())		and not self:touhouHandCardsFix(target) then			huwei_target=target			break		end	end	if huwei_target  then		return huwei_target	end	return nilendsgs.ai_playerchosen_intention.tymh_huwei = -60--【今昔】ai local jinxi_skill = {}jinxi_skill.name = "jinxi"table.insert(sgs.ai_skills, jinxi_skill)function jinxi_skill.getTurnUseCard(self)    if self.player:getMark("@jinxi")==0 then return nil end	cards=self.player:getCards("h")	hp=self.player:getHp()	if cards:length()+hp <=3 then		return sgs.Card_Parse("#jinxi:.:")	end	return nilendsgs.ai_skill_use_func["#jinxi"]=function(card,use,self)	use.card = cardendsgs.ai_use_value.jinxi = 2sgs.ai_use_priority.jinxi = 0--嘲讽值设定sgs.ai_chaofeng.yyc001 = 0sgs.ai_chaofeng.yyc002 = 3sgs.ai_chaofeng.yyc003 = -2sgs.ai_chaofeng.yyc004 = 1sgs.ai_chaofeng.yyc005 = 0sgs.ai_chaofeng.yyc006 = 2sgs.ai_chaofeng.yyc007 = 1sgs.ai_chaofeng.yyc008 = -1sgs.ai_chaofeng.yyc009 = 3sgs.ai_chaofeng.yyc010 = -1