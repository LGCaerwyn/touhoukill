--【死蝶】ai--1修改函数isPriorFriendOfSlash --2 function SmartAI:slashProhibit(card, enemy, from)--进而影响函数useCardSlash sgs.ai_skill_use.slash  --3 sgs.ai_card_intention.Slash 技能者本人的杀仇恨为0 死蝶杀的仇恨为0 --4 sgs.ai_skill_invoke.EightDiagramsgs.ai_skill_playerchosen.sidie = function(self, targets)	local sidie =self.player:getTag("sidie_target"):toPlayer()	local use_sidie=true	local target_table = self:getEnemies(self.player)	self:sort(target_table, "hp")	local bad_targets={}	local normal_targets={}	local good_targets={}	local slash = sgs.Sanguosha:cloneCard("slash", sgs.Card_NoSuit, 0)    --没考虑闪的情况 默认命中后的效果			for _,p in pairs(target_table) do		if self:slashProhibit(slash, p, sidie) or not self:slashIsEffective(slash, p, sidie)		then 			continue		end		local dummy_damage=sgs.DamageStruct(slash, sidie, p, 1, sgs.DamageStruct_Normal)		local final_damage=self:touhouDamage(dummy_damage,sidie, p)		if final_damage.damage>0 then			if self:isWeak(p) then				table.insert(good_targets,p)			elseif final_damage.damage>1 then				table.insert(good_targets,p)			else				table.insert(normal_targets,p)			end		end	end			if #good_targets>0 then 		return good_targets[1]	elseif #normal_targets>0 then		return normal_targets[1]	end	--没有合适目标	if self:isFriend(sidie) then		local bad_target = target_table[1] or targets:first()		return bad_target	end	return nilendsgs.ai_playerchosen_intention.sidie = 30sgs.sidie_keep_value = {	Slash = 7}--【返魂】aisgs.ai_skill_playerchosen.fanhun = function(self, targets)	local canJudge = self:invokeTouhouJudge()	if not canJudge then return nil end	target_table =sgs.QList2Table(targets)	if #target_table==0 then return false end	local huazhong_target	for _,target in pairs(target_table) do			if  self:isFriend(target) then			return target		end	end	return nilendsgs.ai_playerchosen_intention.fanhun = -80--【境界】aisgs.ai_skill_invoke.aojiaofsujingjie = truesgs.ai_skill_discard.aojiaofsujingjie = function(self)	local to_discard = {}	local cards = self.player:getHandcards()	cards = sgs.QList2Table(cards)	self:sortByKeepValue(cards)	table.insert(to_discard, cards[1]:getEffectiveId())	return to_discardend--【死生】ai--sgs.ai_choicemade_filter.cardChosen.aojiaofsusisheng = -50sgs.ai_skill_invoke.aojiaofsusisheng = function(self)	local who= self.room:getCurrentDyingPlayer()		if self:isFriend(who) then 		if getCardsNum("Peach", who, self.player) >= 1 or getCardsNum("Analeptic", who, self.player) >= 1 then			if self:hasWeiya(who)  then				return true			elseif who:getHandcardNum()>=3 then 				return true			end			return false		end		return true 	end	return false endsgs.ai_skill_askforag.aojiaofsusisheng = function(self, card_ids)	return card_ids[1]endsgs.ai_choicemade_filter.skillInvoke.aojiaofsusisheng = function(self, player, promptlist)	local who= player:getRoom():getCurrentDyingPlayer()		if promptlist[#promptlist] == "yes" then			sgs.updateIntention(player, who, -70)		--else  --明桃不救的情况暂时不好排除 		--	if player:getPile("aojiaofsujingjie"):length()>=2 then		--		sgs.updateIntention(player, who, 60)		--	end		endendsgs.ai_skill_cardchosen.aojiaofsusisheng = function(self, who, flags)	if flags == "he" then		local who= self.player:getRoom():getCurrentDyingPlayer()		if who:getEquip(1) and who:getEquip(1):isKindOf("SilverLion") then			return who:getEquip(1)		end		local hcards = who:getCards("h")		if hcards:length()>0 then			return hcards:first()		end		local ecards = who:getCards("e")		if ecards:length()>0 then			return ecards:first()		end	endend--【静动】aisgs.ai_skill_invoke.aojiaofsujingdong = function(self)	local target=self.player:getTag("jingdong_target"):toPlayer()	if  target:hasSkill("huanmeng") or  target:hasSkill("zaozu") or target:hasSkill("yongheng")then		return false 	end	num=target:getHandcardNum()-target:getMaxCards()	if num==0 then return false end	cards=self.player:getPile("aojiaofsujingjie")	if cards:isEmpty() then return false end	if not self:isFriend(target) then		return false	else		if self:isWeak(target) and num>0 then			return true		end		if num>1   then			if cards:length()>3 then				return true			else				if num>3 then					return true				end			end		end	end	return falseendsgs.ai_skill_askforag.aojiaofsujingdong = function(self, card_ids)	--考虑神隐八云紫作为敌友的情况下，还要给牌排序。	return card_ids[1]endsgs.ai_choicemade_filter.skillInvoke.aojiaofsujingdong = function(self, player, promptlist)		local to=self.room:getCurrent()	if not (to:hasSkill("huanmeng") or  to:hasSkill("zaozu") or to:hasSkill("yongheng"))then	num=to:getHandcardNum()-to:getMaxCards()	if promptlist[#promptlist] == "yes" then			sgs.updateIntention(player, to, -60)	else		if num>=3 then			sgs.updateIntention(player, to, 30)		end	end	endend--【照料】aisgs.ai_skill_cardask["@zhaoliao"] = function(self, data)	local a=data:toDamage().to	if not self:isFriend(a) then return "." end	--目前只尝试给出一张	--给出装备优先。。。	local ecards=self.player:getCards("e")	if ecards:length()>0 then return "$" .. ecards:first():getId() end	local cards = self.player:getCards("h")	cards = sgs.QList2Table(cards)	if #cards==0 then return "." end	self:sortByUseValue(cards)	return "$" .. cards[1]:getId()endsgs.ai_skill_choice.zhaoliao=function(self)	if self.player:isKongcheng() then return "zhaoliao1" end	return "zhaoliao2"endsgs.ai_choicemade_filter.skillChoice.zhaoliao = function(self, player, promptlist)	local choice = promptlist[#promptlist]	local target =player:getTag("zhaoliao_target"):toPlayer()	if not target then return end		if choice== "zhaoliao1" then  		sgs.updateIntention(player, target, -40)	else		sgs.updateIntention(player, target, -80)	endend--无中生有 askForExchange使用默认ai--【狡黠】aisgs.ai_skill_invoke.jiaoxia = function(self)	return self:invokeTouhouJudge()end--【剑术】ai 锁定技不需要  但要增加如何使用杀的ai？--【楼观】ai 锁定技不需要--【白楼】aisgs.ai_skill_invoke.bailou =function(self,data)	local target=data:toPlayer()	if self:isEnemy(target) then		return true	endend--【合奏】ai 。。。--【人偶】ai sgs.ai_skill_invoke.renou = true--【军势】ai sgs.ai_view_as.junshi = function(card, player, card_place)	local pattern=sgs.Sanguosha:getCurrentCardUsePattern()	if not card:isKindOf("EquipCard") then return false end	local suit = card:getSuitString()	local number = card:getNumberString()	local card_id = card:getEffectiveId()	if card_place ~= sgs.Player_PlaceSpecial then		if pattern=="jink" then			return ("jink:junshi[%s:%s]=%d"):format(suit, number, card_id)		elseif pattern=="slash" then			return ("slash:junshi[%s:%s]=%d"):format(suit, number, card_id)		end	endendlocal junshi_skill = {}junshi_skill.name = "junshi"table.insert(sgs.ai_skills, junshi_skill)junshi_skill.getTurnUseCard = function(self, inclusive)        if not sgs.Slash_IsAvailable(self.player)  then return false end		local ecards={}		for _,c in sgs.qlist(self.player:getCards("he")) do			if c:isKindOf("EquipCard") then				table.insert(ecards,c)			end		end        if #ecards==0 then return false end		self:sortByUseValue(ecards, true)        local suit = ecards[1]:getSuitString()        local number = ecards[1]:getNumberString()        local card_id = ecards[1]:getEffectiveId()        local slash_str = ("slash:junshi[%s:%s]=%d"):format(suit, number, card_id)        local slash = sgs.Card_Parse(slash_str)                        assert(slash)        return slash	end--【式神】aisgs.ai_skill_choice.shishen=function(self)		if self.player:getPhase() == sgs.Player_Start then		return "shishen1"	end	if self.player:hasFlag("shishen_choice") then--受伤的情况		ran = self.room:findPlayerBySkillName("zhaoliao")		if ran and ran:getCards("he")>=2 and self:isFriend(ran) then			return "cancel"		else			return "shishen1"		end	end	if self.player:getPhase() == sgs.Player_Play  and self.player:getMark("@shi")==0    then		for _,card in sgs.qlist(self.player:getCards("h")) do			if card:isNDTrick() and not card:isKindOf("Nullification") then				return "shishen2"			end		end	end	return "cancel"end--【野性】 aisgs.ai_slash_prohibit.yexing = function(self, from, to, card)	if to:hasSkill("yexing") and to:getMark("@shi") ==0 then		if card:isKindOf("FireSlash") or card:isKindOf("ThunderSlash") then 			return false		else			if from:hasSkill("ldlkhere")then				return false			end		end	end	return trueend--【妖术】ai   --问题不少 --目前只会用，不会考虑情况再用。。。--操作上仅仅区分了借刀 和铁锁sgs.ai_skill_use["@@yaoshu"] = function(self, prompt)		local dummy_use = { isDummy = true, to = sgs.SPlayerList() }	local id=self.player:getMark("yaoshumark")-1	cardname=sgs.Sanguosha:getCard(id):objectName()	local card=sgs.Sanguosha:cloneCard(cardname, sgs.Card_NoSuit, 0)	card:setSkillName("yaoshu")	local target		self:useTrickCard(card, dummy_use)	if not dummy_use.card then return false end		if dummy_use.to:isEmpty() then		if card:isKindOf("IronChain") then			return "."		end		return dummy_use.card:toString()	else		local target_objectname = {}		if card:isKindOf("IronChain") then			for _, p in sgs.qlist(dummy_use.to) do				if (self:isEnemy(p) and not p:isChained()) 				or (self:isFriend(p) and p:isChained())then					table.insert(target_objectname, p:objectName())				end				if #target_objectname==2 then break end			end		else			for _, p in sgs.qlist(dummy_use.to) do				if self:isEnemy(p) then					table.insert(target_objectname, p:objectName())					target=p					break				end			end		end				if card:isKindOf("Collateral") then			local victim			for _,p in sgs.qlist(self.room:getOtherPlayers(target))do				if self:isEnemy(p) and target:canSlash(p,nil,true) then					table.insert(target_objectname, p:objectName())					victim=p					break				end			end			if not victim then				return "."			end					end		return dummy_use.card:toString() .. "->" .. table.concat(target_objectname, "+")	end	return "."end--【记忆】ai  sgs.ai_skill_invoke.jiyi = true--sgs.ai_skill_askforyiji.jiyi = sgs.ai_skill_askforyiji.yiji--几乎照搬秘计sgs.ai_skill_askforyiji.jiyi = function(self, card_ids)	local available_friends = {}	if #self.friends_noself==0 then return nil, -1 end	for _, friend in ipairs(self.friends_noself) do		if not friend:hasSkill("manjuan") and not self:isLihunTarget(friend) then table.insert(available_friends, friend) end	end    if self.player:getHandcardNum()<=2 then  return nil, -1 end	local toGive, allcards = {}, {}	local keep	for _, id in ipairs(card_ids) do		local card = sgs.Sanguosha:getCard(id)		if not keep and (isCard("Jink", card, self.player) or isCard("Analeptic", card, self.player)) then			keep = true		else			table.insert(toGive, card)		end		table.insert(allcards, card)	end	local cards = #toGive > 0 and toGive or allcards	self:sortByKeepValue(cards, true)	local id = cards[1]:getId()	local card, friend = self:getCardNeedPlayer(cards)	if card and friend and table.contains(available_friends, friend) then return friend, card:getId() end	if #available_friends > 0 then		self:sort(available_friends, "handcard")		for _, afriend in ipairs(available_friends) do			if not self:needKongcheng(afriend, true) then				return afriend, id			end		end		self:sort(available_friends, "defense")		return available_friends[1], id	end	return nil, -1end--【春眠】ai锁定技 不需要--【报春】aisgs.ai_skill_playerchosen.baochun = function(self, targets)	target_table =sgs.QList2Table(targets)	if #target_table==0 then return false end	self:sort(target_table, "handcard")	for _,target in pairs(target_table) do			if  self:isFriend(target) then			return target			--break		end	end	return nilendsgs.ai_playerchosen_intention.baochun = -80sgs.ai_need_damaged.baochun = function(self, attacker, player)	x= player:getLostHp()+1 	if x>=3 and player:getHp()>1 then		return true	end	return falseend--【春意】ai  锁定技 不需要--【战操】aisgs.ai_skill_invoke.shrxzhancao = function(self,data)	local use=self.player:getTag("shrxzhancao_carduse"):toCardUse()	local target =self.player:getTag("shrxzhancao_target"):toPlayer()	if not self:isFriend(target) then return false end	if self:touhouCardEffectNullify(use.card,target) then return false end --此杀已经无效	if self:isFriend(use.from) and use.from:hasSkills("shenyin|lizhi") then return false end	local hasEquip=false	cards =self.player:getCards("he") 	for _,card in sgs.qlist(cards) do		if card:isKindOf("EquipCard") then			hasEquip=true			break		end	end	if self:isWeak(target)		and ((not self:isWeak(self.player)) or hasEquip) then		return true	end	if getCardsNum("Jink", target, self.player) < 1 or sgs.card_lack[target:objectName()]["Jink"] >0 then		if target:objectName()==self.player:objectName() then			return true		else			if  (hasEquip or self.player:getHp()>1) then				if self:hasHeavySlashDamage(use.from, use.card, target) then					return true				end				if target:isChained() and (use.card:isKindOf("NatureSlash") ) then					for _,p in pairs (self.friends) do						if self:isWeak(p) and p:isChained() then							return true						end					end				end			end		end	end		return falseendsgs.ai_skill_cardask["@shrxzhancao-discard"] = function(self, data)		cards =self.player:getCards("he") 	cards=sgs.QList2Table(cards)	ecards={}	for _,card in pairs(cards) do		if card:isKindOf("EquipCard") then			table.insert(ecards,card)		end	end		if #ecards==0 then return "." end	self:sortByCardNeed(ecards)	return "$" .. ecards[1]:getId()end	sgs.ai_choicemade_filter.skillInvoke.shrxzhancao = function(self, player, promptlist)	--此处的self.player 和player有区别？	local target =player:getTag("shrxzhancao_target"):toPlayer()	if target then		if promptlist[#promptlist] == "yes" then			sgs.updateIntention(player, target, -50)		end		endend--【魔操】ailocal shrxmocao_skill = {}shrxmocao_skill.name = "shrxmocao"table.insert(sgs.ai_skills, shrxmocao_skill)shrxmocao_skill.getTurnUseCard = function(self)	if self.player:hasUsed("#shrxmocao") then return nil end	for _,p in sgs.qlist(self.room:getOtherPlayers(self.player)) do		if  p:getCards("e"):length()>0 then			t=true			break		end	end	if t then	return sgs.Card_Parse("#shrxmocao:.:")	end	return nilendsgs.ai_skill_use_func["#shrxmocao"]=function(card,use,self)	local targets={}	for _,p in sgs.qlist(self.room:getOtherPlayers(self.player)) do		if  p:getCards("e"):length()>0 then			table.insert(targets,p)		end	end		self:sort(targets,"value")	for _, p in ipairs(targets) do        if (p:getLostHp()<2 and self:isEnemy(p)) or (p:getLostHp()>1 and self:isFriend(p))  then			use.card = card			if use.to then				use.to:append(p)				if use.to:length() >= 1 then return end			end		end    endendsgs.ai_use_value.shrxmocao = 9sgs.ai_use_priority.shrxmocao = 6sgs.ai_card_intention.shrxmocao = function(self, card, from, tos)	if tos[1]:getLostHp()>=2  then		sgs.updateIntention(from, tos[1], -30)	else		sgs.updateIntention(from, tos[1], 30)	endend--【神隐】ai--function SmartAI:getDamagedEffects(to, from, slash)--绝情  旧马岱 寒冰的效果判断都在这里  返回bool值sgs.ai_skill_invoke.shenyin = function(self,data)	local target=data:toPlayer()	if  self:isEnemy(target) then		if not self:canAttack(target) then			return true		end		if self:isWeak(target) then			return false		end		return true	end	if  self:isFriend(target) then		return true	endend--【隙间】aisgs.ai_skill_playerchosen.xijian = function(self, targets)	local target_willobtain = self.player:getTag("xijian_target"):toPlayer()	if not self:isFriend(target_willobtain) then return  nil end	if self:isFriend(target_willobtain) then		target_table =sgs.QList2Table(targets)		local xijian_target=target_table[1]		sgs.updateIntention(self.player, xijian_willobtain, -50)		return xijian_target	end	return nil	--其实是没想选择人的策略	--for _,target in pairs(target_table) do		--	if  self:isEnemy(target) and  then	--		return target	--	end	--endendsgs.ai_skill_askforag.xijian = function(self, card_ids)	local cards={}	local target = self.player:getTag("xijian_target"):toPlayer()	--为什么是table?	for _,card_id in pairs(card_ids) do		local card=sgs.Sanguosha:getCard(card_id)		table.insert(cards,card)	end	self:sortByCardNeed(cards, true)	if self:isFriend(target)  then		return cards[1]:getId()	endend--【幽曲】aisgs.ai_skill_choice.youqu=function(self)	local yukari=self.player:getRoom():findPlayerBySkillName("xijian")		if yukari and self:isFriend(yukari) then		return "siling3"	end	cards=self.player:getPile("siling")	if cards:length()>=2 then		return "siling1"	else		return "siling2"	endend--【亡舞】aisgs.ai_skill_invoke.wangwu = function(self,data)	local target=self.player:getTag("wangwu_target"):toPlayer()		if not target then return false end	if self:isEnemy(target) then		return true	end	return falseendsgs.ai_skill_askforag.wangwu = function(self, card_ids)	local wangwu_card=self.player:getTag("wangwu_card"):toCard()	local cards={}	for _,card_id in pairs(card_ids) do		local card=sgs.Sanguosha:getCard(card_id)		table.insert(cards,card)	end	self:sortByCardNeed(cards)		for _,card in pairs(cards) do        if card:sameColorWith(wangwu_card) then            return cards[1]:getId()        end    endend--【死欲】ai--一群人对着死欲砍 我要哭了sgs.ai_slash_prohibit.hpymsiyu = function(self, from, to, card)	if not to:hasSkills("hpymsiyu+juhe") then		return false	end	if to:getHp()>1 then 		return false	end	if self:isFriend(from,to) then		return false	end	if to:containsTrick("indulgence") or to:containsTrick("supply_shortage") then		return true	end	if not to:faceUp() then		return true	end	local recoverNum=0	for _,p in pairs(self.enemies) do		recoverNum =recoverNum+ getCardsNum("Peach", p, from) 		recoverNum =recoverNum+ getCardsNum("Analeptic", p, from)	end		 	if recoverNum>0 then		return true	else		return false	end	end--【居合】ai--只考虑了妖梦本身，如果双将或者凭依的话，还要考虑血量sgs.ai_skill_invoke.juhe = truesgs.ai_skill_discard.juhe = sgs.ai_skill_discard.gamerule--嘲讽值设定sgs.ai_chaofeng.yym001 = 0sgs.ai_chaofeng.yym002 = 1sgs.ai_chaofeng.yym003 = 3sgs.ai_chaofeng.yym004 = 1sgs.ai_chaofeng.yym005 = 0sgs.ai_chaofeng.yym006 = 0sgs.ai_chaofeng.yym007 = 1sgs.ai_chaofeng.yym008 = 1sgs.ai_chaofeng.yym009 = 3sgs.ai_chaofeng.yym010 = 1sgs.ai_chaofeng.yym011 = 0sgs.ai_chaofeng.yym012 = -1sgs.ai_chaofeng.yym013 = -2