--【普度】ailocal pudu_skill = {}pudu_skill.name = "pudu"table.insert(sgs.ai_skills, pudu_skill)pudu_skill.getTurnUseCard = function(self)	if self.player:hasUsed("#pudu") then return nil end	if self.player:getHp()<3 then return nil end	for _,p in sgs.qlist(self.room:getOtherPlayers(self.player)) do		if  p:isWounded() and self:isFriend(p) then			t=true		end	end	if t then	return sgs.Card_Parse("#pudu:.:")	end	return nilendsgs.ai_skill_use_func["#pudu"]=function(card,use,self)	self:sort(self.friends_noself,"hp")    for _, p in ipairs(self.friends_noself) do        if p:isWounded() then			use.card = card			if use.to then				use.to:append(p)				if use.to:length() >= 1 then return end			end		end    endendsgs.ai_card_intention.pudu = -100--【救赎】aisgs.ai_skill_invoke.jiushu = true--【法华】ai--暂时定为true 让忠卖血去吧。。。sgs.ai_skill_invoke.fahua = truesgs.ai_skill_invoke.fahua_change = function(self,data)	local lord=self.room:getTag("fahua_target"):toPlayer()	local use=self.room:getTag("fahua_use"):toCardUse()	if not self:isFriend(lord) then		return false	end	--if self.player:hasSkill("zhengyi") and use.card:isBlack() then return true end	--hastrickeffective包含正义和云上	if self:hasTrickEffective(use.card, self.player, use.from) then return true end	if self:hasSkill("weizhuang") and use.from:isKongcheng() then		return true	end	if self.player:isChained() and use.card:isKindOf("IronChain") then		return true	end	if self:isWeak(lord) then		return true	elseif not self:isWeak(self.player) then		return true	end	return falseendsgs.ai_choicemade_filter.skillInvoke.fahua_change = function(self, player, promptlist)	local target=self.room:getTag("fahua_target"):toPlayer()	if target then		if promptlist[#promptlist] == "yes" then			sgs.updateIntention(player, target, -60)		end	endend--【未知】ai--你妹  真要考虑起来比制衡还坑爹。。。local weizhi_skill = {}weizhi_skill.name = "weizhi"table.insert(sgs.ai_skills, weizhi_skill)function weizhi_skill.getTurnUseCard(self)    if self.player:hasUsed("#weizhi") then return nil end    local handcards = sgs.QList2Table(self.player:getHandcards())    if #handcards==0 then return nil end	self:sortByUseValue(handcards)	changes={}	for _,c in pairs (handcards) do		if not c:isKindOf("TrickCard") then			table.insert(changes,c)		end	end	if #changes>1 then		use_cards={}		table.insert(use_cards,changes[1]:getId())		table.insert(use_cards,changes[2]:getId())		return sgs.Card_Parse("#weizhi:" .. table.concat(use_cards, "+") .. ":")	end	return nilendsgs.ai_skill_use_func["#weizhi"]=function(card,use,self)	use.card = cardendsgs.ai_use_value.weizhi =  6sgs.ai_use_priority.weizhi = 6--【伪装】aisgs.ai_skill_cardask["@weizhuang-discard"] = function(self, data)    local target =self.player:getTag("weizhuang_target"):toPlayer()	local use =data:toCardUse()	if not self:isEnemy(target) and not self:isFriend(target) then return "." end		effect=false--此bool值代表是否想让其生效	if self:isFriend(target)  then		if ("snatch|dismantlement"):match(use.card:objectName()) 		and target:getCards("e"):length()>0 		then			effect = true		end		if use.card:isKindOf("GodSalvation") and target:isWounded() then			effect = true		end	end	--对友方Nue需要弃牌使其有效的牌只有五谷和受伤时的桃园？还有兵乐？？	if self:isEnemy(target) then		effect=true		if use.card:isKindOf("AmazingGrace") then			effect = false		end		if use.card:isKindOf("GodSalvation")  then			effect = false		end	end	if not effect then return "." end	local cards = sgs.QList2Table(self.player:getCards("h"))    cards1={}	for _,card in pairs(cards) do		if card:isKindOf("BasicCard") then			table.insert(cards1,card)		end	end	if #cards1==0 then return "." end	self:sortByCardNeed(cards1)	    return "$" .. cards1[1]:getId()end--【净化】aisgs.ai_skill_playerchosen.jinghua = function(self, targets)	target_table = self:getFriends(self.player)	--local lingtning = self:invokeTouhouJudge()	if #target_table==0 then return nil end	--优先度怎么定？	current=self.player:getRoom():getCurrent()	--current=self.player:getTag("jinghua_current"):toPlayer()		list1={}	list2={}	local jinghua_target	if current:objectName()==self.player:objectName() then	else		if self.player:getHp()<2 then return nil end	end		for _,target in pairs(target_table) do			if target:getCards("j"):length()>0 then			for _,card in sgs.qlist(target:getCards("j")) do				if card:isKindOf("Indulgence") then					table.insert(list1,target)					if current:objectName()==target:objectName() then						jinghua_target=target					end				end				if card:isKindOf("SupplyShortage") then					table.insert(list2,target)					if current:objectName()==target:objectName() then						jinghua_target=target					end				end			end			end	end	if #list1==0 and  #list2==0then return nil end	if not jinghua_target then--当前回合人不需要净化		for _,target in pairs(target_table) do				if table.contains(list1,target) and table.contains(list2,target) then				jinghua_target=target			end		end	end	if not jinghua_target then--没有头上同时顶着兵乐的人 且自己回合		if current:objectName()==self.player:objectName() then			if #list2>0 then				jinghua_target=list2[1]			end			if #list1>0 then				jinghua_target=list1[1]			end		end	end	if jinghua_target and jinghua_target:faceUp() then--翻面中提前解除无意义		for _,card in sgs.qlist(jinghua_target:getCards("j")) do			if card:isKindOf("SupplyShortage") or card:isKindOf("Indulgence") then				id=card:getId()				self.player:setTag("jinghua_id",sgs.QVariant(id))				break			end		end		return jinghua_target	else		return nil	endendsgs.ai_skill_askforag.jinghua = function(self, card_ids)	id =self.player:getTag("jinghua_id"):toInt()	self.player:removeTag("jinghua_id")	return id endsgs.ai_playerchosen_intention.jinghua = -60sgs.ai_trick_prohibit.jinghua = function(self, from, to, card)	if not card:isKindOf("DelayedTrick")  then return false end	if self:isFriend(from,to) then return false end	return trueend--【正义】ai--其实要考虑摸牌的情况--function SmartAI:hasTrickEffective(card, to, from)sgs.ai_skill_invoke.zhengyi = function(self,data)	local use=self.room:getTag("zhengyi_use"):toCardUse()	luanying=self.room:findPlayerBySkillName("luanying")	weiya_current=self.room:getCurrent()	if use.card:isKindOf("Slash") then		if self:isEnemy(use.from)  and use.from:hasWeapon("Axe") and use.from:getCards("he"):length()>=2 then			return false		end		if self:hasWeiya() then			return false		end		if luanying and self:isEnemy(luanying) and luanying:getPile("aojiaofsujingjie"):length()>0 then			return false		end		if self:getCardsNum("Jink") > 0 then			return true		end		if use.from:hasSkill("sidie") and self:isFriend(use.from)  then			return true		end	end	if use.card:isKindOf("GlobalEffect") then		return true	end	if use.card:isKindOf("IronChain") then		return self.player:isChained()	end	if use.from:hasSkill("lizhi") and self:isFriend(use.from)  then		if use.card:isKindOf("Slash") or use.card:isKindOf("SavageAssault")  then			return true		end	end	if use.card:isKindOf("SavageAssault") and self:getCardsNum("Slash") > 1 then		if self:hasWeiya() then			return false		end		if luanying and self:isEnemy(luanying) and luanying:getPile("aojiaofsujingjie"):length()>0 then			return false		end		return true	end	return false end--[[sgs.ai_slash_prohibit.zhengyi = function(self, from, to, card)	if not card:isBlack() then 		return false	else		if from:hasSkill("shende") and self:getOverflow(from,from:getMaxCards())>0 then			return false		end	end	return trueend]]--【船难】aisgs.ai_skill_invoke.chuannan = function(self,data)	local target=data:toPlayer()	if  self:isEnemy(target) then		local card = sgs.Sanguosha:cloneCard("supply_shortage")		return not self:touhouDelayTrickBadTarget(card,target,self.player)	end	return falseendsgs.ai_skill_cardask["@chuannan"] = function(self, data)	if self.player:isKongcheng() then return "." end	local damage=data:toDamage()	local target	if self:isEnemy(damage.to) then		target=damage.to	elseif self:isEnemy(damage.from) then		target=damage.from	end	if target then		local card = sgs.Sanguosha:cloneCard("supply_shortage")		if self:touhouDelayTrickBadTarget(card,target,self.player) then			return "."		end		local handcards = sgs.QList2Table(self.player:getHandcards())		self:sortByUseValue(handcards,true)		return "$" .. handcards[1]:getId()	end	return "."end--【理智】ai--SmartAI:getAoeValue(card, player)--sgs.ai_skill_cardask.aoesgs.ai_skill_invoke.lizhi = function(self,data)	local d = self.player:getTag("lizhi_damage"):toDamage()		local target=data:toPlayer()	if self:isFriend(target) then		return true	end	if self:isEnemy(target) then		if self:isWeak(target) then			return false		end		if d.damage>=2 then 			return false		end		if not self:canAttack(target) then			return true		end	endendsgs.ai_choicemade_filter.skillInvoke.lizhi = function(self, player, promptlist)	local d = self.player:getTag("lizhi_damage"):toDamage()	if d and d.to then		if promptlist[#promptlist] == "yes" then			if self:isEnemy(player, d.to) then				--有时候不能打卖血流  这个情况还得细分			else				sgs.updateIntention(player, d.to, -20)			end		elseif promptlist[#promptlist] == "no" then			sgs.updateIntention(player, to, 60)		end	endend--【云上】ai锁定技 不需要--SmartAI:hasTrickEffective--【搜集】aisgs.ai_skill_invoke.souji = true--【探索】aisgs.ai_skill_invoke.tansuo = true--【遗忘】aisgs.ai_skill_playerchosen.ddlxsyiwang = function(self, targets)	local target_table= sgs.QList2Table(targets)    self:sort(target_table,"hp")	for _,p in pairs (target_table) do		if self:isFriend(p) then			return p		end	end	return nilendsgs.ai_playerchosen_intention.ddlxsyiwang = -70--【惊吓】ai--决策判断较麻烦。。。sgs.ai_skill_choice.ddlxsjingxia=function(self)	local damage=self.player:getTag("jingxia"):toDamage()	local from=damage.from	local fieldcard=sgs.SPlayerList()	local fieldcard1=sgs.SPlayerList()	for _, p in sgs.qlist(self.room:getAllPlayers()) do        if self.player:canDiscard(p, "e") and self:isEnemy(p) then fieldcard:append(p) end		if self.player:canDiscard(p, "j") and self:isFriend(p) then fieldcard1:append(p) end	end	if self:isWeak(self.player) and self.player:canDiscard(self.player, "e") then		return "discardfield"	end	if fieldcard1:length()>0 then return "discardfield" end	if from:getHandcardNum()==2 then		return "discard"	end	if fieldcard:length()>0 then return "discardfield" end	return "discard"endsgs.ai_skill_playerchosen.ddlxsjingxia = function(self, targets)	local fieldcard={}	local fieldcard1={}	for _, p in sgs.qlist(targets) do        if self.player:canDiscard(p, "e") and self:isEnemy(p) then table.insert(fieldcard,p) end		if self.player:canDiscard(p, "j") and self:isFriend(p) then table.insert(fieldcard1,p) end	end	if self:isWeak(self.player) and self.player:getCards("e"):length()>0   and self.player:canDiscard(self.player, "e") then		return self.player	end	if #fieldcard1>0 then return fieldcard1[1] end	if #fieldcard > 0 then		self:sort(fieldcard,"hp")		return fieldcard[1]	end	--return targets:first()	return nilendsgs.ai_skill_cardchosen.ddlxsjingxia = function(self, who, flags)	if self:isFriend(who) then		cards=who:getCards("j")		cards = sgs.QList2Table(cards)		if #cards>0 then			return cards[1]		end		cards=who:getCards("e")		cards = sgs.QList2Table(cards)		if #cards>0 then			return cards[1]		end	end	if self:isEnemy(who) then		cards=who:getCards("ej")		cards = sgs.QList2Table(cards)		if #cards>0 then			return cards[1]		end	endendsgs.ai_playerchosen_intention.ddlxsjingxia = 50--【变幻】aisgs.ai_skill_invoke.bianhuan = function(self, data)	local damage =data:toDamage()	local x=self.player:getLostHp()	if damage.damage>1 or x>1 then		return true	end	if self.player:getHp()<2 and x>0 then		return true	end	return falseend--【神拳】ai--【怒火】ailocal nuhuo_skill = {}nuhuo_skill.name = "nuhuo"table.insert(sgs.ai_skills, nuhuo_skill)nuhuo_skill.getTurnUseCard = function(self)	if self.player:hasUsed("#nuhuo") then return nil end	local slash = sgs.Sanguosha:cloneCard("slash", sgs.Card_NoSuit, 0)	    slash:deleteLater()    if self.player:isCardLimited(slash,sgs.Card_MethodUse) then return nil end 			return sgs.Card_Parse("#nuhuo:.:")endsgs.ai_skill_use_func["#nuhuo"]=function(card,use,self)	local slash = sgs.Sanguosha:cloneCard("slash", sgs.Card_NoSuit, 0)	--可以用dummyuse更加简洁？？	local targets={}--enemy	local targets1={}--friend	local others=self.room:getOtherPlayers(self.player)	for _,p in sgs.qlist(others) do		if  self.player:inMyAttackRange(p) 		and self:canAttack(p) and self.player:canSlash(p,slash,true)  then			local fakeDamage=sgs.DamageStruct()			fakeDamage.card=slash			fakeDamage.nature= self:touhouDamageNature(slash,self.player,p)			fakeDamage.damage=1			fakeDamage.from=self.player			fakeDamage.to=p				if p:hasSkill("xuying") or self:touhouDamage(fakeDamage,self.player,p).damage>0   or self:touhouDamageEffect(fakeDamage,self.player,p) then				if self:isEnemy(p) then					table.insert(targets,p)				end				if self:isFriend(p) then					table.insert(targets1,p)				end			end		end	end		if #targets==0 then return  end	--搭配一轮    for _,p in ipairs(self.friends_noself) do        if p:hasSkill("lizhi") then			use.card = card			if use.to then				use.to:append(p)				if use.to:length() >= 1 then return end			end		end    end	if self.player:getHp()<2 then return false end 	--self:sort(self.enemies,"hp")	if #self.friends_noself <1 and #targets1>0 then return false end 	local chooser = #self.friends_noself>0 and self.friends_noself[1] or others:first()	use.card = card	if use.to then		use.to:append(chooser)		if use.to:length() >= 1 then return end	endendsgs.ai_skill_playerchosen.nuhuo = function(self, targets)	local slash = sgs.Sanguosha:cloneCard("slash", sgs.Card_NoSuit, 0)	local source=self.room:getCurrent()	local target_table= sgs.QList2Table(targets)    self:sort(target_table,"hp")	for _,p in pairs (target_table) do		if self:isEnemy(p) and self:canAttack(p,source) then			local fakeDamage=sgs.DamageStruct()			fakeDamage.card=slash			fakeDamage.nature= self:touhouDamageNature(slash,source,p)			fakeDamage.damage=1			fakeDamage.from=source			fakeDamage.to=p				if p:hasSkill("xuying") or self:touhouDamage(fakeDamage,source,p).damage>0   or self:touhouDamageEffect(fakeDamage,source,p) then				return p			end		end	end	return target_table[1]end--嘲讽值设定sgs.ai_chaofeng.xlc001 = 3sgs.ai_chaofeng.xlc002 = 0sgs.ai_chaofeng.xlc003 = -2sgs.ai_chaofeng.xlc004 = -1sgs.ai_chaofeng.xlc005 = 0sgs.ai_chaofeng.xlc006 = 1sgs.ai_chaofeng.xlc007 = -1sgs.ai_chaofeng.xlc008 = 1