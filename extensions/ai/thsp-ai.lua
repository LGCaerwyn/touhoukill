--【控票】ai锁定技 不需要--function SmartAI:hasLoseHandcardEffective(player)--function SmartAI:getLeastHandcardNum(player)--【手绘】ai--viewas 部分目前无脑置换local shouhui_skill = {}shouhui_skill.name = "shouhui"table.insert(sgs.ai_skills, shouhui_skill)function shouhui_skill.getTurnUseCard(self)	local cards=self.player:getCards("he")	local ecards={}	for _,c in sgs.qlist(cards) do		if c:isKindOf("EquipCard") then			table.insert(ecards,c)		end	end	if #ecards==0 then return nil end	self:sortByKeepValue(ecards)	if #ecards>0 then		return sgs.Card_Parse("#shouhui:" .. ecards[1]:getEffectiveId() .. ":")	end	return nilendsgs.ai_skill_use_func["#shouhui"] = function(card, use, self)	use.card=card	return endsgs.ai_skill_use["@@LuaShouhui"] = function(self, prompt)	local cards=self.player:getCards("he")	local ecards={}	for _,c in sgs.qlist(cards) do		if c:isKindOf("EquipCard") then			table.insert(ecards,c)		end	end	if #ecards==0 then return "." end	self:sortByUseValue(ecards)	return "#shouhui:".. ecards[1]:getId() ..":"  end--【我域】ailocal woyu_skill = {}woyu_skill.name = "woyu"table.insert(sgs.ai_skills, woyu_skill)function woyu_skill.getTurnUseCard(self)    if self.player:getMark("@Woyu")==0 then return nil end	if self.player:getRole() ~="lord" then return nil end		return sgs.Card_Parse("#woyu:.:")endsgs.ai_skill_use_func["#woyu"] = function(card, use, self)		if #self.enemies >0 then			use.card = card        			if use.to then				use.to:append(self.enemies[1])				if use.to:length() >= 1 then return end			end        endendsgs.ai_use_value.woyu = 7sgs.ai_use_priority.woyu = 7--【倍杀】aisgs.ai_skill_playerchosen.beisha = function(self, targets)	local num= self.player:getHandcardNum()/2	targets1={}--slash	targets2={}--losehp	targets3={}--weak rebel	local slash= sgs.Sanguosha:cloneCard("slash", sgs.Card_NoSuit, 0)	local slash_eff	for _,target in sgs.qlist(targets) do			if self:isEnemy(target) then			if self:slashIsEffective(slash, target, self.player) then					local fakeDamage=sgs.DamageStruct()					fakeDamage.card=slash					fakeDamage.nature= self:touhouDamageNature(slash,self.player,target)					fakeDamage.damage=1					fakeDamage.from=self.player					fakeDamage.to=target					slash_eff= self:touhouDamage(fakeDamage,self.player,target).damage>0			end			if target:getHandcardNum()> num then				if slash_eff  then					table.insert(targets1,target)				end			else				if not self:touhouHpLocked(target) then					table.insert(targets2,target)				end				if sgs.ai_role[target:objectName()] == "rebel" and target:getHp()==1 then					if slash_eff then						table.insert(targets3,target) 					end				end			end		end	end	if #targets3>0  then		self:sort(targets3, "value")		self.player:setTag("beisha_waak_rebel",sgs.QVariant(true))		return targets3[1]	end	if #targets2>0  then		self:sort(targets2, "hp")		return targets2[1]	end	if #targets1>0  then		self:sort(targets2, "value")		return targets1[1]	end	return nilendsgs.ai_playerchosen_intention.beisha = 80sgs.ai_skill_choice.beisha= function(self)	if self.player:getTag("beisha_waak_rebel") 	and self.player:getTag("beisha_waak_rebel"):toBool() then		self.player:setTag("beisha_waak_rebel",sgs.QVariant(false))		return "useslash"	end	return "losehp"end--【吸散】aifunction keycard_xisan(card)	if card:isKindOf("Peach") or card:isKindOf("Nullification") then		return true	end	return falseendsgs.ai_skill_invoke.xisan = function(self, data)	if self.player:getHandcardNum()<3 then		return true	end	cards=self.player:getCards("h")	for _,card in sgs.qlist(cards) do		if keycard_xisan(card) then			return false		end	end	return trueendsgs.ai_skill_choice.xisan=function(self)		--对应“搜集”	local current=self.room:getCurrent()	if self:isFriend(current) and current:hasSkill("souji") then		return "b"	end	if self.player:getHandcardNum()<3 then		return "a"	else		return "b"	endendsgs.ai_skill_discard.xisan = function(self, discard_num, optional, include_equip)	cards=self.player:getCards("h")	cards_table=sgs.QList2Table(cards)	self:sortByCardNeed(cards_table)	local d={}	throwall=false	local current=self.room:getCurrent()	if self:isFriend(current) and current:hasSkill("souji") then		throwall=true	end	for _,card in pairs(cards_table) do		if not throwall then			if not keycard_xisan(card) then				table.insert(d,card:getId())			end		else			table.insert(d,card:getId())		end	end		if #d==0 then		table.insert(d,cards_table[1]:getId())	end	return dend--【举报】aisgs.ai_skill_playerchosen.jubao = function(self, targets) 	local jubao_target	for _,target in sgs.qlist(targets) do		if self:isEnemy(target) then			if not jubao_target then				jubao_target=target			else				if target:getCards("e"):length()> jubao_target:getCards("e"):length() then					jubao_target=target				end			end		end	end	if jubao_target then		return jubao_target	end	return nilendsgs.ai_playerchosen_intention.jubao = 60--【海底】ai--SmartAI:doNotDiscardsgs.ai_skill_invoke.haidi = true--【闪击】ailocal shanji_skill = {}shanji_skill.name = "shanji"table.insert(sgs.ai_skills, shanji_skill)shanji_skill.getTurnUseCard = function(self, inclusive)		--如何防止胡乱顶掉武器？？？		local shanji_cards={}		local ids=self.player:getPile("piao")		if ids:length()==0 then return false end 		for _,id in sgs.qlist(ids) do			card =sgs.Sanguosha:getCard(id)			if  card:isAvailable(self.player) then 				table.insert(shanji_cards,card)			end		end		if #shanji_cards==0 then return false end		self:sortByUseValue(shanji_cards, true)		local acard =  shanji_cards[1]				local suit =acard:getSuitString()		local number = acard:getNumberString()		local card_id = acard:getEffectiveId()        local slash_str = (acard:objectName()..":shanji[%s:%s]=%d"):format(suit, number, card_id) 			local slash = sgs.Card_Parse(slash_str)                        assert(slash)        return slash		endfunction sgs.ai_cardsview_valuable.shanji(self, class_name, player)	local ids=player:getPile("piao")	local card	for _,id in sgs.qlist(ids) do		card1 =sgs.Sanguosha:getCard(id)		if card1:isKindOf(class_name)then			card=card1			break		end	end	if not card then return nil end	local suit =card:getSuitString()	local number = card:getNumberString()    local card_id = card:getEffectiveId()	return (card:objectName()..":shanji[%s:%s]=%d"):format(suit, number, card_id) 	end--【压制】ailocal yazhi_skill = {}yazhi_skill.name = "yazhi"table.insert(sgs.ai_skills, yazhi_skill)function yazhi_skill.getTurnUseCard(self)    --if self:getOverflow() <1 then--因为目前还不会用票 所以避免浪费	--	return nil	--end		if self.player:hasUsed("#yazhi") then return nil end	local cards = self.player:getHandcards()	cards = sgs.QList2Table(cards)		if #cards==0  then 		return nil 	else		self:sortByKeepValue(cards)		return sgs.Card_Parse("#yazhi:" .. cards[1]:getEffectiveId() .. ":")	endendsgs.ai_skill_use_func["#yazhi"]=function(card,use,self)	use.card = cardend--【天翔】ai  不需要--【倾仓】aisgs.ai_skill_invoke.qingcang =  function(self,data)	if #self.enemies==0 then return false end	if self:willSkipPlayPhase(self.player)  then		return false	end	return trueend--askforexchange按照一般rule--新【常青】ai 锁定技 --嘲讽值sgs.ai_chaofeng.sp002 = 1sgs.ai_chaofeng.sp003 = 0sgs.ai_chaofeng.sp006 = 0