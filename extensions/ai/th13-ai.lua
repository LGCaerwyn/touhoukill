--【圣格】ai 觉醒技 不需要--【倾听】ailocal qingting_skill = {}qingting_skill.name = "qingting"table.insert(sgs.ai_skills, qingting_skill)qingting_skill.getTurnUseCard = function(self)	if self.player:hasUsed("#qingting") then return nil end	t=false	for _,p in sgs.qlist(self.room:getOtherPlayers(self.player)) do		if not p:isKongcheng() then			t=true		end	end	if t then	return sgs.Card_Parse("#qingting:.:")	end	return nilendsgs.ai_skill_use_func["#qingting"]=function(card,use,self)	use.card = cardendsgs.ai_skill_discard.qingting = function(self)	local target=self.player:getTag("qingting_give"):toPlayer()	if not target then		target=self.player:getTag("qingting_return"):toPlayer()	end	local to_discard = {}	local cards = self.player:getHandcards()	cards = sgs.QList2Table(cards)		if self:isFriend(target) then		self:sortByUseValue(cards, true)	else		self:sortByUseValue(cards)	end	--对幸运和春灵梦的配合要考虑	if target:hasSkill("aojiaofsuchunxi") or target:hasSkill("yfd_xingyun") then			local redcard			for _,c in pairs (cards)do				if self:isFriend(target) then					if c:getSuit()==sgs.Card_Heart then						redcard=c						break					end				else					if c:getSuit()~=sgs.Card_Heart then						redcard=c						break					end				end			end			if not redcard then				redcard=cards[1]			end			table.insert(to_discard, redcard:getEffectiveId())			return to_discard	end	table.insert(to_discard, cards[1]:getEffectiveId())	return to_discardendsgs.ai_use_value.qingting = 7sgs.ai_use_priority.qingting = 7--【敕令】ai--sgs.ai_skill_use.slash中需要特定敕令slash的idsgs.ai_skill_invoke.chiling = function(self,data)	local isSlash=self.player:getTag("chiling_showslash"):toInt()	local slasher=self.player:getTag("chiling_givener"):toPlayer()	if isSlash==1 then		return self:isFriend(slasher)	end	return falseendsgs.ai_skill_use["@@chilingGiven"] =sgs.ai_skill_use.slash --【戏画】ai  --完全跟着人的操作流程写的 没有按照蛊惑ai写 measure_xihua = function(player,card)	local success=0	for _,c in player:getCards("h") do		if card:objectName()==c:objectName() then			return false		end		if card:isKindOf("BasicCard") and c:isKindOf("BasicCard") then			success =success+1		elseif  card:isKindOf("TrickCard") and c:isKindOf("TrickCard") then			success =success+1		elseif c:getNumber()>10 then			success =success+1		end	end	local num=player:getHandcardNum()/2	return success >num endsgs.ai_skill_playerchosen.xihua = function(self, targets)--选择展示人	local duxin=self.room:findPlayerBySkillName("duxin")	if duxin then		if self:isFriend(duxin) then			return duxin		end		if targets:length()>1 then			targets:removeOne(duxin)		end	end	return targets:first()end--local xihua_skill = {}--xihua_skill.name = "xihua"--table.insert(sgs.ai_skills, xihua_skill)--[[xihua_skill.getTurnUseCard = function(self)	if self.player:isKongcheng() then return end	local current = self.room:getCurrent()	if not current or current:isDead() or current:getPhase() == sgs.Player_NotActive then return end	local slash = sgs.Sanguosha:cloneSkillCard("xihua")    slash:setUserString("peach")	--slash:addSubcards(card)    --slash:setSkillName("xihua")    assert(slash)	return slash	--return sgs.Card_Parse("#xihuachoice:.:")endsgs.ai_skill_use_func["#xihua"]=function(card,use,self)	local userstring=card:toString()	userstring=(userstring:split(":"))[3]	local guhuocard=sgs.Sanguosha:cloneCard(userstring) --, card:getSuit(), card:getNumber()	guhuocard:setSkillName("xihua")	if guhuocard:getTypeId() == sgs.Card_TypeBasic then self:useBasicCard(guhuocard, use) else assert(guhuocard) self:useTrickCard(guhuocard, use) end	if not use.card then return end	use.card=cardend]]sgs.ai_skill_choice.xihua= function(self, choices, data)		--self.player:gainMark("@nimei")	local strs={"slash","fire_slash","thunder_slash","analeptic","peach",	"amazing_grace","god_salvation","savage_assault","archery_attack","duel","ex_nihilo","snatch","dismantlement","collateral","iron_chain","fire_attack"}	for var=1, #strs, 1 do		if choices:match(strs[var]) then			local fake_card=sgs.Sanguosha:cloneCard(strs[var])			if measure_xihua(self.player,fake_card) then				return strs[var]			end		end	end	--需要一个global_failflag	return "cancel"endsgs.ai_skill_use["@@xihua"] = function(self, prompt)	local parsedPrompt = prompt:split(":")	local choice=parsedPrompt[1]	local fake_card=sgs.Sanguosha:cloneCard(choice)	--local str = self:getGuhuoCard(choice, true, 1)--"Slash"大写、、、	local str ="#xihua:.:choice"	--return "#xihua:.:->" .. self.enemies[1]:objectName()	local dummy_use = { isDummy = true }	if fake_card:isKindOf("TrickCard") then		self:useTrickCard(card, dummy_use)	end	if fake_card:isKindOf("BasicCard") then		self:useBasicCard(fake_card, dummy_use)	end	if dummy_use.card then return str endend--[[function sgs.ai_cardsview_valuable.xihua(self, class_name, player)	if player:isKongcheng()  then		return nil	end	local acard = sgs.Sanguosha:cloneCard("thunder_slash", sgs.Card_NoSuit, 0)			local suit =acard:getSuitString()	local number = acard:getNumberString()    local card_id = acard:getEffectiveId()		--if class_name == "Peach" then	--	local dying = player:getRoom():getCurrentDyingPlayer()	--	if not dying  then return nil end	--	return ("peach:xihua[%s:%s]=%d"):format(suit, number, card_id) 	--end	--if class_name == "Jink" then	--	return ("jink:xihua[%s:%s]=%d"):format(suit, number, card_id) 	--end	--if class_name == "Slash" then	--	return ("slash:xihua[%s:%s]=%d"):format(suit, number, card_id) 	--end	if class_name == "Nullification" then		return ("nullification:xihua[%s:%s]=%d"):format(suit, number, card_id) 	end	end]]--[[function SmartAI:getGuhuoViewCard(class_name, latest_version)	local card_use, fakeCards = {}, {}	local all_cards = (self.room:getMode() == "_mini_48")	local can_question = #self.enemies	if latest_version == 1 then		for _, enemy in ipairs(self.enemies) do			if enemy:hasSkill("chanyuan") or (enemy:hasSkill("hunzi") and enemy:getMark("hunzi") == 0) then can_question = can_question - 1 end		end		if can_question == 0 then all_cards = true end	end	local ratio = (can_question == 0) and 100 or (#self.enemies / can_question)	if all_cards then		card_use = sgs.QList2Table(self.player:getHandcards())		self:sortByKeepValue(card_use)	else		if latest_version == -1 then			for _, card in sgs.qlist(self.player:getHandcards()) do				if card:isKindOf(class_name) and card:getSuit() == sgs.Card_Heart then					table.insert(card_use, card)				end			end			for _, card in sgs.qlist(self.player:getHandcards()) do				if card:isKindOf(class_name) and not table.contains(card_use, card) then					table.insert(card_use, card)				end			end		else			for _, card in sgs.qlist(self.player:getHandcards()) do				if card:isKindOf(class_name) then					table.insert(card_use, card)				end			end		end		for _, card in sgs.qlist(self.player:getHandcards()) do			if not card:isKindOf(class_name) then				if (card:isKindOf("Slash") and self:getCardsNum("Slash", "h") >= 2 and not self:hasCrossbowEffect())					or (card:isKindOf("Jink") and self:getCardsNum("Jink", "h") >= 3)					or (card:isKindOf("EquipCard") and self:getSameEquip(card))					or card:isKindOf("Disaster") then					table.insert(fakeCards, card)				end			end		end		self:sortByKeepValue(fakeCards)	end	local classname2objectname = {		["Slash"] = "slash", ["Jink"] = "jink",		["Peach"] = "peach", ["Analeptic"] = "analeptic",		["Nullification"] = "nullification",		["FireSlash"] = "fire_slash", ["ThunderSlash"] = "thunder_slash"	}	if classname2objectname[class_name] then		local card = sgs.Sanguosha:cloneCard(classname2objectname[class_name])		if not card or self.player:isCardLimited(card, sgs.Card_MethodUse, true) then return end		if #card_use > 1 or (#card_use > 0 and (latest_version == 1 or card_use[1]:getSuit() == sgs.Card_Heart or all_cards)) then			local index = 1			local ban = table.concat(sgs.Sanguosha:getBanPackages(), "|")			if not all_cards and (class_name == "Peach" or (class_name == "Analeptic" and not ban:match("maneuvering")) or class_name == "Jink") then				index = #card_use			end			local card_class = latest_version == 1 and "@GuhuoCard=" or "@NosGuhuoCard="			return card_class .. card_use[index]:getEffectiveId() .. ":" .. classname2objectname[class_name]		end		if #fakeCards > 0 and math.random(1, 5) <= ratio then			local card_class = latest_version == 1 and "@GuhuoCard=" or "@NosGuhuoCard="			return card_class .. fakeCards[1]:getEffectiveId() .. ":" .. classname2objectname[class_name]		end	endendfunction SmartAI:getGuhuoCard(class_name, at_play, latest_version)	if not latest_version then return self:getGuhuoCard(class_name, at_play, 1) or self:getGuhuoCard(class_name, at_play, -1) end	local player = self.player	local current = self.room:getCurrent()	if not (latest_version == 1 and player:hasSkill("guhuo") and not player:hasFlag("GuhuoUsed")			and current and current:isAlive() and current:getPhase() ~= sgs.Player_NotActive)		and not (latest_version == -1 and player:hasSkill("nosguhuo")) then return end	if at_play then		if class_name == "Peach" and not player:isWounded() then return		elseif class_name == "Analeptic" and player:hasUsed("Analeptic") then return		elseif (class_name == "Slash" or class_name == "ThunderSlash" or class_name == "FireSlash") and not self:slashIsAvailable(player) then return		elseif class_name == "Jink" or class_name == "Nullification" then return		end	else		if class_name == "Peach" and self.player:hasFlag("Global_PreventPeach") then return end	end	return self:getGuhuoViewCard(class_name, latest_version)end]]--【尸解】ai  --SmartAI:filterEvent  更新仇恨 同【悲歌】 --【风水】aisgs.ai_skill_cardask["@fengshui-retrial"] = function(self, data)	if self.player:isKongcheng() then return "." end	judge=data:toJudge()	if self:needRetrial(judge) then		local handcards = sgs.QList2Table(self.player:getHandcards())		self:sortByUseValue(handcards)		return "$" .. handcards[1]:getId()	end	return "."endsgs.ai_skill_askforag.fengshui = function(self, card_ids)        local cards ={}		for _,id in sgs.list(card_ids) do			local card = sgs.Sanguosha:getCard(id)			table.insert(cards,card)		end        local judge = self.player:getTag("fengshui_judge"):toJudge()        return  self:getRetrialCardId(cards, judge) --返回-1会有问题？end--【雷矢】ailocal leishi_skill = {}leishi_skill.name = "leishi"table.insert(sgs.ai_skills, leishi_skill)leishi_skill.getTurnUseCard = function(self)	if self.player:hasUsed("#leishi") then return nil end	--[[t=false	for _,p in pairs(self.enemies) do		if not p:isKongcheng() then			t=true		end	end	if t then		return sgs.Card_Parse("#leishi:.:")	end]]	return sgs.Card_Parse("#leishi:.:")	--return nilendsgs.ai_skill_use_func["#leishi"] = function(card, use, self)        self:sort(self.enemies,"handcard")        local slash = sgs.Sanguosha:cloneCard("thunder_slash", sgs.Card_NoSuit, 0)				local targets={}		for _, p in ipairs(self.enemies) do            if not p:isKongcheng() and  self.player:canSlash(p,slash,false) then							if getCardsNum("Jink", p, self.player) < 1 				or sgs.card_lack[p:objectName()]["Jink"] == 1 or self:isWeak(p)  then    					table.insert(targets,p)				end			end        end		if #targets >0 then			use.card = card            if use.to then				use.to:append(targets[1])				if use.to:length() >= 1 then return end			end        endend--【愤怨】ai--策略 推测队友桃子数量。。。--不考虑是否给队友3张--function SmartAI:getAllPeachNum(player)sgs.ai_skill_invoke.fenyuan = function(self,data)	current = self.room:getCurrent()	if self:isFriend(current) then		return false	end	for _,c in sgs.qlist(self.player:getCards("h")) do		if c:isKindOf("Peach") or c:isKindOf("Analeptic") then			return false		end	end	if #self.friends_noself==0 then return true end	for _,p in pairs (self.friends_noself)do		num =p:getHp()+2		if p:getHandcardNum() >=num  then			return false		end	end	return trueend--【邪法】ai--getCardsNum 预估闪的数量local xiefa_skill = {}xiefa_skill.name = "xiefa"table.insert(sgs.ai_skills, xiefa_skill)function xiefa_skill.getTurnUseCard(self)    if self.player:hasUsed("#xiefa") then return nil end    local handcards = sgs.QList2Table(self.player:getHandcards())    if #handcards==0 then return nil end	self:sortByUseValue(handcards)	return sgs.Card_Parse("#xiefa:" .. handcards[1]:getEffectiveId() .. ":")endsgs.ai_skill_use_func["#xiefa"] = function(card, use, self)        local nojink_targets={}		--local weak_targets={}		local good_targets={}--no jink and weak		local bad_targets={}		for _, p in ipairs(self.enemies) do			if getCardsNum("Jink", p, self.player) < 1 				or sgs.card_lack[p:objectName()]["Jink"] == 1 then    				table.insert(nojink_targets,p)				if self:isWeak(p) then  					table.insert(good_targets,p)				end			--elseif self:isWeak(p) then			--	table.insert(weak_targets,p)			else				table.insert(bad_targets,p)			end        end				local attacker		local victim		local slash = sgs.Sanguosha:cloneCard("slash", sgs.Card_NoSuit, 0)		local slash_eff				if  #good_targets>0 then			for _, p in ipairs(good_targets) do				for _,a in pairs (self.friends_noself) do					if a:inMyAttackRange(p) then continue end					if a:canSlash(p,slash,true) then						if self:slashIsEffective(slash, p, a) then							local fakeDamage=sgs.DamageStruct()							fakeDamage.card=slash							fakeDamage.nature= self:touhouDamageNature(slash,a,p)							fakeDamage.damage=1							fakeDamage.from=a							fakeDamage.to=p							slash_eff= self:touhouDamage(fakeDamage,a,p).damage>0						end						if slash_eff then							attacker=a							victim=p							break						end					end				end			end			end						if not attacker  and #nojink_targets>0 then			for _, p in ipairs(nojink_targets) do				for _,a in pairs (self.friends_noself) do					if a:inMyAttackRange(p) then continue end					if a:canSlash(p,slash,true) then						attacker=a						victim=p						break					end				end			end		end		if not attacker  and #bad_targets>0 then			for _,p in ipairs(bad_targets) do				for _,a in pairs (self.enemies) do					if a:inMyAttackRange(p) then continue end					if a:canSlash(p,slash,true) and self:slashIsEffective(slash, p, a) then						attacker=a						victim=p						break					end				end			end		end		if attacker and victim then			use.card = card			if use.to then				use.to:append(attacker)				use.to:append(victim)				if use.to:length() >= 2 then return end			end		endend--邪法的仇恨没有特别注明，但是居然能更新。。。--【穿壁】aisgs.ai_skill_invoke.chuanbi = function(self,data)	--slash-jink:sgs1	local slash_source	local strs=data:toStringList()	if strs and #strs==2 then 		local str1=(strs[2]:split(":"))[1]		local str2=(strs[2]:split(":"))[2]		if str1=="slash-jink" then			for _,p in sgs.qlist(self.room:getAlivePlayers()) do				--self.room:writeToConsole(p:objectName())				if p:objectName() == str2 then					slash_source=p					break				end			end		end	end	if slash_source and self:isFriend(slash_source)	and slash_source:getPhase() == sgs.Player_Play 	and slash_source:hasSkill("sidie")   then		return false	end	return trueend--【毒爪】ai  local duzhua_skill = {}duzhua_skill.name = "duzhua"table.insert(sgs.ai_skills, duzhua_skill)duzhua_skill.getTurnUseCard = function(self, inclusive)        if self.player:hasFlag("duzhua") then return false end		local cards = self.player:getCards("h")        cards = sgs.QList2Table(cards)        if #cards==0 then return false end		self:sortByUseValue(cards, true)		cards1={}		for _,c in pairs (cards) do			if c:isRed() then			table.insert(cards1,c)			end		end		if #cards1==0 then return false end		local red_card=cards1[1]        if red_card then			local suit = red_card:getSuitString()            local number = red_card:getNumberString()            local card_id = red_card:getEffectiveId()            local slash_str = ("slash:duzhua[%s:%s]=%d"):format(suit, number, card_id)            local slash = sgs.Card_Parse(slash_str)                            assert(slash)            return slash        endendsgs.duzhua_suit_value = {	heart = 3.9,	diamond = 3.9}--【饕餮】aisgs.ai_skill_invoke.taotie =  function(self)	return self:invokeTouhouJudge()end--【回声】aisgs.ai_skill_invoke.huisheng = function(self,data)	local use=self.room:getTag("huisheng_use"):toCardUse()	local target = use.from	local card = use.card	if not target then return false end	if not card then return false end	if self:isFriend(target) then		if card:isKindOf("Peach") and target:isWounded() then			return true		end	end	if self:isEnemy(target) then		if card:isKindOf("Duel") then			return self:getCardsNum("Slash") >= getCardsNum("Slash", target, self.player)		end		if not card:isKindOf("Peach") then			return true		end	endendsgs.ai_skill_playerchosen.huisheng = function(self, targets)--回声借刀	for _,target in sgs.qlist(targets) do		if self:isEnemy(target) then			return target		end	end	return targets:first()end--【诵经】aisgs.ai_skill_invoke.songjing = true--【吹雪】ai--useBasicCard--useTrickCard--useEquipCard--useCardIndulgencefunction SmartAI:needChuixue(player)	player = player or self.player	if not player:hasSkill("xxsyyzchuixue") then return false end	--鼓励只弃一张	if self:getOverflow() ~=1 then return false end	local targets	if self:isFriend(player) then		targets=self.enemies	end	if self:isEnemy(player) then		targets=self.friends	end	if targets and #targets>0 then		for _,p in pairs(targets) do			if p:isKongcheng() and not self:touhouHpLocked(p) then				return true			end		end	end	return falseendsgs.ai_skill_playerchosen.xxsyyzchuixue = function(self, targets)	target_table =sgs.QList2Table(targets)	if #target_table==0 then return nil end	self:sort(target_table,"handcard")	for _,target in pairs(target_table) do			if  self:isEnemy(target) and not self:touhouHpLocked(target) then			return target		end	end	return nilendsgs.ai_skill_cardask["@xxsyyzchuixue-discard"] = function(self)        if self.player:isKongcheng() then			return "."		end		if self:touhouHpLocked(self.player)  then			return "."		end		local cards = sgs.QList2Table(self.player:getCards("h"))		self:sortByKeepValue(cards)		        return "$" .. cards[1]:getId()endsgs.ai_playerchosen_intention.xxsyyzchuixue = 50--【无寿】ai--sgs.ai_card_intention.Slash 普杀藤甲无寿 更新仇恨--sgs.ai_armor_value.EightDiagram sgs.ai_skill_invoke.xxsyyzwushou = function(self)	if self.player:getHp()<=3 then		return true	endendsgs.ai_skill_discard.xxsyyzwushou = sgs.ai_skill_discard.gamerulesgs.ai_slash_prohibit.xxsyyzwushou = function(self, from, to, card)	if to:getHp()<=3 and to:hasSkill("xxsyyzwushou") 	and self:isEnemy(from,to) 	and to:hasArmorEffect("EightDiagram") 	and (not from:hasWeapon("QinggangSword") or not from:hasSkills("louguan+bailou")) then 		if #self.enemies>1 then 			return true		end	end	return falseend--【不明】ai--目标选择的自定义函数貌似可以改得比较简单local function inBumingRange(bumingType,player,target)	if bumingType==0 then		return player:inMyAttackRange(target)	end	if bumingType==2 then		local rangefix =1		distance=player:distanceTo(target,rangefix)		return  distance <=player:getAttackRange()	end	if bumingType==1 then			local rangefix =0		if player:getAttackRange() >player:getAttackRange(false) then			rangefix = rangefix +player:getAttackRange() - player:getAttackRange(false)		end		distance=player:distanceTo(target,rangefix)		return  distance <=player:getAttackRange()	endendlocal function findBumingTarget(self,card)	self:sort(self.enemies,"handcard")    local rangefix=0	bumingType=0	if self.player:getWeapon() and self.player:getWeapon():getId() == card:getId() then		if self.player:getAttackRange() >self.player:getAttackRange(false) then			rangefix = rangefix +self.player:getAttackRange() - self.player:getAttackRange(false)		end		bumingType=1	end	if self.player:getOffensiveHorse() and self.player:getOffensiveHorse():getId() == card:getId() then		rangefix=rangefix+1		bumingType=2	end			for _, p in ipairs(self.enemies) do        		if inBumingRange(bumingType,self.player,p) then			if p:hasSkill("yemang") and bumingType==2 then				rangefix=rangefix+1			end			local slash = sgs.Sanguosha:cloneCard("slash", sgs.Card_NoSuit, 0)			local duel = sgs.Sanguosha:cloneCard("duel", sgs.Card_NoSuit, 0)					if (self.player:canSlash(p,slash,true,rangefix) and not(self.player:isCardLimited(slash, sgs.Card_MethodUse))) 			or ( not self.player:isProhibited(p, duel)and not self.player:isCardLimited(duel, sgs.Card_MethodUse))			then				num=self.player:getHandcardNum() - p:getHandcardNum()				if self:isWeak(p) or num>2 or p:getHandcardNum()<3 then					return p				end			end		end	end	return nilendlocal buming_skill = {}buming_skill.name = "buming"table.insert(sgs.ai_skills, buming_skill)buming_skill.getTurnUseCard = function(self)	cards =sgs.QList2Table(self.player:getCards("he"))	if #cards==0 then return nil end	self:sortByKeepValue(cards)	if self.player:hasUsed("#buming") then return nil end	target=findBumingTarget(self,cards[1])	if not target then return nil end	_data=sgs.QVariant()	_data:setValue(target)	self.player:setTag("buming_target",_data)	return sgs.Card_Parse("#buming:" .. cards[1]:getId() .. ":")	endsgs.ai_skill_use_func["#buming"]=function(card,use,self)		use.card = card		p= self.player:getTag("buming_target"):toPlayer()	if use.to then		use.to:append(p)		if use.to:length() >= 1 then return end	endendsgs.ai_skill_choice.buming=function(self)	cards =sgs.QList2Table(self.player:getCards("h"))	local s=0	local j=0	for _,card in pairs (cards) do		if card:isKindOf("Slash") then			s=s+1		end		if card:isKindOf("Jink") then			j=j+1		end	end	if j<2 and s>1 then 		return "duel_buming"	end	if s<2 and j>1 then 		return "slash_buming"	end	return "slash_buming"end--没有主动不明队友的吧。。。  【幻视】。。。。壮哉 幻视。。。sgs.ai_card_intention.buming = 70--【正体】ai 锁定技 不需要sgs.ai_skill_playerchosen.zhengti = function(self, targets)	target_table =sgs.QList2Table(targets)		for _,p in pairs (target_table) do		if self:isEnemy(p) then			return p		end	end	return target_table[1]endsgs.ai_playerchosen_intention.zhengti = 10--【晴雨】ai sgs.ai_skill_invoke.ddlxsqingyu = truesgs.ai_skill_discard.ddlxsqingyu = function(self, discard_num, optional, include_equip)	local source =self.player:getTag("qingyu_source"):toPlayer()	local em={}	if self:isEnemy(source) and self.player:getHandcardNum()>2 then		cards =sgs.QList2Table(self.player:getCards("h"))		self:sortByKeepValue(cards)		table.insert(em,cards[1]:getId())	end	return emend--晴雨动机--【过客】aisgs.ai_skill_invoke.ddlxsguoke = true--嘲讽值设定sgs.ai_chaofeng.slm001 = 0sgs.ai_chaofeng.slm002 = 0sgs.ai_chaofeng.slm003 = 2sgs.ai_chaofeng.slm004 = -1sgs.ai_chaofeng.slm005 = 2sgs.ai_chaofeng.slm006 = -1sgs.ai_chaofeng.slm007 = -1sgs.ai_chaofeng.slm008 = -1sgs.ai_chaofeng.slm009 = -1sgs.ai_chaofeng.slm010 = -1