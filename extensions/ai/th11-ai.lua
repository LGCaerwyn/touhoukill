--【想起】ai  --[[sgs.ai_skill_cardask["@slash-discard"] = function(self,data)        local target=data:toDamage().to		if not self:isEnemy(target) then return "." end		local cards ={}		for _,card in sgs.qlist(self.player:getCards("h")) do			if card:isKindOf("Slash") then				table.insert(cards,card)			end		end		if #cards==0 then return "." end		self:sortByKeepValue(cards)        return "$" .. cards[1]:getId()endsgs.ai_skill_cardask["@trick-discard"] = function(self,data)        local target=data:toDamage().to		if not self:isEnemy(target) then return "." end		local cards ={}		for _,card in sgs.qlist(self.player:getCards("h")) do			if card:isKindOf("TrickCard") then				table.insert(cards,card)			end		end		if #cards==0 then return "." end		self:sortByKeepValue(cards)        return "$" .. cards[1]:getId()end]]sgs.ai_skill_invoke.xiangqi = function(self,data)	local from=self.player:getTag("xiangqi_from"):toPlayer()	local to =self.player:getTag("xiangqi_to"):toPlayer()	local damCard=self.player:getTag("xiangqi_card"):toCard()	if not from or not to then return false end	if not damCard then return false end	--自己受伤	if self.player:objectName()==to:objectName() then		if not self:isFriend(from) then			return true		else			return self:getOverflow(from) >3		end 	end	--其他人受伤	if damCard:isKindOf("BasicCard") then		if self:isEnemy(to) then			return true		end		if self:isFriend(to) then			return  from:getHandcardNum()>=4 		end	end	if damCard:isKindOf("TrickCard") then		if self:isFriend(to) then			return true		end	end	return falseendsgs.ai_skill_cardchosen.xiangqi = function(self, who, flags)	local from=self.player:getTag("xiangqi_from"):toPlayer()	local to =self.player:getTag("xiangqi_to"):toPlayer()	local same =false 	local damCard=self.player:getTag("xiangqi_card"):toCard()		if  self:isEnemy(to) then		same=true	end	if flags == "h" then		local cards = from:getHandcards()		cards = sgs.QList2Table(cards)				if self.player:hasSkill("duxin") then			local card 			self:sortByUseValue(cards, same)			local keyword			if  damCard:isKindOf("BasicCard") then				keyword="BasicCard"			else				keyword="TrickCard"			end			for _,c in pairs (cards)do 				if same then						if c:isKindOf(keyword) then						card=c						break					end				else					if not c:isKindOf(keyword) then						card=c						break					end				end			end			if card then				return card			else				return cards[1]			end		end		local j = math.random(1, #cards)		return cards[j]	endend--【读心】ai 锁定技 不需要--【护主】aisgs.ai_skill_invoke.huzhu = function(self,data)	cards =self.player:getCards("h")	cardname="Jink"	for _,card in sgs.qlist(cards) do		if card:isKindOf(cardname) then			return false		end	end	if self:isWeak(self.player) then		return true	else		self:sort(self.friends_noself)		for _,p in pairs (self.friends_noself) do			if not self:isWeak(p) then				return true			end		end	end	return falseendsgs.ai_skill_invoke.huzhu_change = function(self,data)	local lord=self.room:getTag("huzhu_target"):toPlayer()	local jinks={}	if not self:isFriend(lord) then return false end	for _,card in sgs.qlist(self.player:getCards("h")) do		if card:isKindOf("Jink") then			table.insert(jinks,card)		end	end	if #jinks <2 then 		if self:isWeak(lord) then			return true		else			return false		end	end	if #jinks >1 then return true endendsgs.ai_choicemade_filter.skillInvoke.huzhu_change = function(self, player, promptlist)	local target=self.room:getTag("huzhu_target"):toPlayer()	if target then		if promptlist[#promptlist] == "yes" then			sgs.updateIntention(player, target, -60)		end	endend--【埋火】ai local maihuo_skill = {}maihuo_skill.name = "maihuo"table.insert(sgs.ai_skills, maihuo_skill)function maihuo_skill.getTurnUseCard(self)    if self.player:hasUsed("#maihuo") then return nil end    local handcards = sgs.QList2Table(self.player:getHandcards())    if #handcards==0 then return nil end	self:sortByUseValue(handcards)	reds={}	for _,c in pairs (handcards) do		if c:isRed() then			table.insert(reds,c)		end	end	if #reds>0 then		return sgs.Card_Parse("#maihuo:" .. reds[1]:getEffectiveId() .. ":")	else		return sgs.Card_Parse("#maihuo:" .. handcards[1]:getEffectiveId() .. ":")	endendsgs.ai_skill_use_func["#maihuo"] = function(card, use, self)        self:sort(self.friends_noself,"handcard")		if #self.friends_noself >0 then			use.card = card            p =self.friends_noself[1]			if self:touhouHandCardsFix(p) and #self.friends_noself >1 then				p =self.friends_noself[2]			end			if use.to then				use.to:append(p)				if use.to:length() >= 1 then return end			end        endendsgs.maihuo_suit_value = {	heart=3.9,	diamond = 3.9}sgs.ai_use_value.maihuo = 7sgs.ai_use_priority.maihuo = 7--挂装备的优先值经过加权居然比5还高。。。sgs.ai_card_intention.maihuo = -70--【无念】ai锁定技 不需要--【耀斑】aisgs.ai_skill_use["@@ldlkyaoban"] = function(self, prompt)	if self.player:isKongcheng() then return "." end	local damage=self.player:getTag("yaoban_damage"):toDamage()	local to=damage.to	local targets={}    for _, p in ipairs(self.enemies) do        if to:objectName()~=p:objectName() then			table.insert(targets,p)		end    end		 	if #targets ==0 then return "."	 end	self:sort(targets,"hp")	local cards = self.player:getHandcards()	cards = sgs.QList2Table(cards)	self:sortByKeepValue(cards)	return "#ldlkyaoban:" ..cards[1]:getEffectiveId().. ":->" .. targets[1]:objectName()	endsgs.ai_card_intention.ldlkyaoban = 60sgs.ai_slash_prohibit.ldlkyaoban = function(self, from, to, card)	local fakeDamage=sgs.DamageStruct()	fakeDamage.card=nil	fakeDamage.nature= sgs.DamageStruct_Normal 	fakeDamage.damage=1	fakeDamage.from=to		if self:isEnemy(from,to) then 		if to:hasSkill("ldlkyaoban") and to:hasSkill("ldlkhere") and not self:isWeak(to) and not to:isKongcheng() then			for _,friend in ipairs(self:getFriends(from)) do				fakeDamage.to=friend				if friend:getHp()<2 and self:touhouDamageInflicted(fakeDamage,to,friend).damage>0 then					return true				end			end		end	end	return falseend--【核热】ai --useEquipCard--防止挂寿衣作死--【怨灵】aisgs.ai_skill_invoke.yuanling = function(self,data)	local target=self.player:getTag("yuanling"):toPlayer()	if self:isEnemy(target) then		return true	endend--【送葬】aifunction Cansave(self,dying,need_peachs)	local all =self.room:getAlivePlayers(player)	local peach_asked=true	room:sortByActionOrder(all)	local peachs=0	for _,p in sgs.qlist(all) do		if peach_asked and p:objectName() ==self.player:objectName() then			peach_asked=false		end		if peach_asked then			continue		end		if self:isFriend(p,dying) then			peachs=peachs+ getCardsNum("Peach", p, self.player) 			if p:objectName() ==dying:objectName() then				peachs=peachs+ getCardsNum("Analeptic", p, self.player) 			end			--sgs.card_lack[p:objectName()]["Peach"] == 1  then		end	end	return peachs >= need_peachendsgs.ai_skill_cardask["@songzang"] = function(self,data)	local dying = data:toDying()	local source = dying.damage.from	local self_role = self.player:getRole()	local target=self.room:getCurrentDyingPlayer()	local target_role=sgs.ai_role[target:objectName()]	local need_kill=false	local need_peachs = math.abs(1-target:getHp())	if self.room:getLord():hasLordSkill("tymh_wuyu") then		source = self.room:getLord()	end	if self_role== "loyalist" or self_role =="lord" then		if self:isEnemy(target)  then			local can_save= Cansave(self,target,need_peachs)			if can_save then				need_kill=true			elseif not source and target_role=="rebel"  then				need_kill=true			elseif source and  not self:isFriend(source) and target_role=="rebel" then				need_kill=true			end		end	end	if self_role== "renegade" then		if self:isEnemy(target) then			local can_save=Cansave(self,target,need_peachs)			if can_save then				need_kill=true			elseif not source and target_role=="rebel"  then				need_kill=true			elseif source and  not self:isFriend(source) and target_role=="rebel" then				need_kill=true			end		end	end	if self_role== "rebel" then		if self:isFriend(target) and source 			and not self:isFriend(source) then			local card_str = self:willUsePeachTo(target)			if card_str =="." then				need_kill=true			end		end		if self:isEnemy(target) then			need_kill = Cansave(self,target,need_peachs)		end	end		if not need_kill  then return "." end		local cards ={}	for _,card in sgs.qlist(self.player:getCards("he")) do		if card:getSuit()==sgs.Card_Spade then			table.insert(cards,card)		end	end	if #cards==0 then return "." end	self:sortByKeepValue(cards)    return "$" .. cards[1]:getId()endsgs.songzang_suit_value = {	spade = 4.9}--【萃集】ai--[[sgs.ai_skill_invoke.yccxcuiji = function(self,data)	if self:isWeak(self.player) then		return true	end	local cards = self.player:getCards("h")    cards = sgs.QList2Table(cards)    for _, card in ipairs(cards) do        if  card:getSuit()==sgs.Card_Spade  then                        return true                   end    endend]]sgs.ai_skill_choice.yccxcuiji=function(self)	if self:isWeak(self.player) then		return "red"	else		return "black"	end	end--【百鬼】ailocal yccxbaigui_skill = {}yccxbaigui_skill.name = "yccxbaigui"table.insert(sgs.ai_skills, yccxbaigui_skill)yccxbaigui_skill.getTurnUseCard = function(self, inclusive)        local cards = self.player:getCards("h")        cards = sgs.QList2Table(cards)        self:sortByUseValue(cards, true)                --先权衡aoe的利弊		local can_use=false		local weak_targets1=0		local weak_targets2=0        targets1=self:getEnemies(self.player)		targets2=self:getFriends(self.player)		if #targets1 >= #targets2+1 then			can_use=true		end		for _,target in pairs(targets1) do			if self:isWeak(target) then				weak_targets1=weak_targets1+1			end		end		for _,target in pairs(targets2) do			if self:isWeak(target) then				weak_targets2=weak_targets2+1			end		end		if weak_targets1>weak_targets2 then			can_use=true		end		if not can_use then return false end		local spade_card		for _, card in ipairs(cards) do                if  card:getSuit()==sgs.Card_Spade and  not isCard("Peach", card, self.player) and not isCard("ExNihilo", card, self.player) then                        spade_card = card                        break                end        end        if spade_card then                local suit = spade_card:getSuitString()                local number = spade_card:getNumberString()                local card_id = spade_card:getEffectiveId()                local trick_str = ("savage_assault:yccxbaigui[%s:%s]=%d"):format(suit, number, card_id)                local trick = sgs.Card_Parse(trick_str)                                assert(trick)                return trick        endendsgs.yccxbaigui_suit_value = {	spade = 3.9}sgs.ai_use_value.yccxbaigui = sgs.ai_use_value.SavageAssault sgs.ai_use_priority.yccxbaigui = sgs.ai_use_priority.SavageAssault --【酒虫】aisgs.ai_view_as.yccxjiuchong = function(card, player, card_place)	local suit = card:getSuitString()	local number = card:getNumberString()	local card_id = card:getEffectiveId()	if card:getSuit()==sgs.Card_Heart and card_place == sgs.Player_PlaceHand then 		return ("analeptic:yccxjiuchong[%s:%s]=%d"):format(suit, number, card_id)	endend--主动吃酒local yccxjiuchong_skill = {}yccxjiuchong_skill.name = "yccxjiuchong"table.insert(sgs.ai_skills, yccxjiuchong_skill)yccxjiuchong_skill.getTurnUseCard = function(self, inclusive)        local cards = self.player:getCards("h")        cards = sgs.QList2Table(cards)        self:sortByUseValue(cards, true)                local heart_card        for _, card in ipairs(cards) do                if  card:getSuit()==sgs.Card_Heart and  not isCard("Peach", card, self.player) and not isCard("ExNihilo", card, self.player)                       and (self:getUseValue(card) < sgs.ai_use_value.Analeptic or inclusive or sgs.Sanguosha:correctCardTarget(sgs.TargetModSkill_Residue, self.player, sgs.Sanguosha:cloneCard("slash")) > 0) then                        heart_card = card                        break                end        end        if heart_card then                local suit = heart_card:getSuitString()                local number = heart_card:getNumberString()                local card_id = heart_card:getEffectiveId()                local analeptic_str = ("analeptic:yccxjiuchong[%s:%s]=%d"):format(suit, number, card_id)                local analeptic = sgs.Card_Parse(analeptic_str)                                assert(analeptic)                return analeptic        endendsgs.yccxjiuchong_suit_value = {	heart = 3.9}--【怪力】ai sgs.ai_skill_invoke.guaili =function(self,data)	local target =self.player:getTag("guaili_target"):toPlayer()	if self:isEnemy(target) then		return true	else		return false	endendsgs.ai_skill_cardask["@guaili"] = function(self, data)	local use = data:toCardUse()	t=false	if self.player:getHandcardNum()==0 then return "." end	for _,p in sgs.qlist(use.to) do		if self:isEnemy(p) and (not p:isKongcheng()) then			--缺闪,没必要怪力耗牌			if getCardsNum("Jink", p, self.player) < 1 or sgs.card_lack[p:objectName()]["Jink"] >0 then				continue			end			if  self:isWeak(p) then				t=true			else 				if self.player:getHandcardNum()>1 then				t= true				end			end		end	end	local handcards = sgs.QList2Table(self.player:getHandcards())	self:sortByUseValue(handcards)	if t then		return "$" .. handcards[#handcards]:getId()	end	return "."endsgs.guaili_suit_value = {	heart = 3.9,	diamond = 3.9}sgs.guaili_keep_value = {	Slash = 7}--【豪饮】ai 锁定技 不需要--【嫉妒】ailocal jidu_skill = {}jidu_skill.name = "jidu"table.insert(sgs.ai_skills, jidu_skill)jidu_skill.getTurnUseCard = function(self, inclusive)        local cards = self.player:getCards("h")        cards = sgs.QList2Table(cards)        if #cards==0 then return false end		self:sortByUseValue(cards, true)				local spade_card=cards[1]        if spade_card then                local suit = spade_card:getSuitString()                local number = spade_card:getNumberString()                local card_id = spade_card:getEffectiveId()                local trick_str = ("duel:jidu[%s:%s]=%d"):format(suit, number, card_id)                local trick = sgs.Card_Parse(trick_str)                                assert(trick)                return trick        endendsgs.ai_skill_invoke.jidu =true--【葛笼】aisgs.ai_skill_choice.gelong= function(self)	local num=self.player:getHandcardNum()-self.player:getMaxCards()	--葛笼特殊	if self:touhouHpLocked(self.player) then		return "gelong1"	end	local card = sgs.Sanguosha:cloneCard("supply_shortage")	local source=self.room:findPlayerBySkillName("gelong")	if self:touhouDelayTrickBadTarget(card, self.player, source) then		return "gelong2"	end	if num>=1 or self.player:getHp()<2 then		return "gelong2"	else		return "gelong1"	endend--【传染】aisgs.ai_skill_invoke.chuanran =true--弃牌和移动目标暂时没想好。。。而且弃牌和移动目标最好统一在一个技能卡里最好?--[[sgs.ai_skill_cardask["@chuanran-discard"] = function(self,data)	local move =data:toMoveOneTime()	local ecard	for _,p in sgs.qlist(move.card_ids) do        local card = sgs.Sanguosha:getCard(p)		if  card:hasFlag("chuanranFlag") then 			ecard=card		end	end	if not ecard then return "." end	local others = self.room:getOtherPlayers(self.room:getCurrent())	local target 	for _, p in sgs.qlist(others) do        if self:isEnemy(p) then			local t=true			for _, c in sgs.qlist(p:getCards("j")) do				if c:objectName() == ecard:objectName()then					t=false				end			end			if t then				target=p				_data=sgs.QVariant()				_data:setValue(target)				self.player:setTag("chuanran_target",_data)				break			end		end	end	if target then		local ecards = self.player:getCards("he")		local cards={}		for _,c in sgs.qlist(ecards) do			if c:isBlack() then				table.insert(cards,c)			end		end		if #cards==0 then return "." end		self:sortByKeepValue(cards)		return "$" .. cards[1]:getId()	end	return "."end]]--[[sgs.ai_skill_playerchosen.chuanran = function(self, targets)	local target=self.player:getTag("chuanran_target"):toPlayer()	if target then		return target	end		return nilend]]sgs.chuanran_suit_value = {	spade = 3.9,	club = 3.9}sgs.ai_skill_use["@@chuanran"] = function(self, prompt)	local cards = self.player:getCards("he")	cards = sgs.QList2Table(cards)	blacks={}	for _,c in ipairs(cards) do		if c:isBlack() then			table.insert(blacks,c)		end	end	if #blacks==0 then return "." end	local ecard = self.player:getTag("chuanran_cardname"):toString()	local others = self.room:getOtherPlayers(self.room:getCurrent())	local target 	for _, p in sgs.qlist(others) do        if self:isEnemy(p) then			local t=true			for _, c in sgs.qlist(p:getCards("j")) do				if c:objectName() == ecard then					t=false				end			end			if t then				target=p				break			end		end	end	if target then		self:sortByKeepValue(blacks)		return "#chuanran:" ..blacks[1]:getEffectiveId().. ":->" .. target:objectName()	end	return "."endsgs.ai_card_intention.chuanran=40--【钓瓶】ai  可能要改动技能。。。暂时不写详细了。。。sgs.ai_skill_invoke.diaoping  =function(self,data)	if self.player:isKongcheng() then return false end	local use=data:toCardUse()	if use.from then		if self:isFriend(use.from) then return false end		for _,p in sgs.qlist(use.to) do			if self:isFriend(p) then				if self:isWeak(p) then					return true				else					if self.player:getHandcardNum()>=2 then 						return true					end				end			end		end	end	return falseend--【桶居】ai 锁定技 不需要--嘲讽值设定sgs.ai_chaofeng.dld001 = 2sgs.ai_chaofeng.dld002 = 2sgs.ai_chaofeng.dld003 = 0sgs.ai_chaofeng.dld004 = -1sgs.ai_chaofeng.dld005 = 2sgs.ai_chaofeng.dld006 = 1sgs.ai_chaofeng.dld007 = -2sgs.ai_chaofeng.dld008 = 1sgs.ai_chaofeng.dld009 = -1