--【创幻】。。。。。。--【神主】ai 锁定技 不需要--【界线】aisgs.ai_skill_cardask["@jiexiandamage"] = function(self, data)	local target=data:toDamage().to	if not self:isFriend(target) then return "." end	cards =self.player:getCards("he") 	cards=sgs.QList2Table(cards)	ecards={}	for _,card in pairs(cards) do		if card:getSuit()==sgs.Card_Heart then			table.insert(ecards,card)		end	end		if #ecards==0 then return "." end	self:sortByCardNeed(ecards)	return "$" .. ecards[1]:getId()endsgs.ai_skill_cardask["@jiexianrecover"] = function(self, data)	local target=data:toPlayer()	if not self:isEnemy(target) then return "." end	cards =self.player:getCards("he") 	cards=sgs.QList2Table(cards)	ecards={}	for _,card in pairs(cards) do		if card:getSuit()==sgs.Card_Spade then			table.insert(ecards,card)		end	end		if #ecards==0 then return "." end	self:sortByCardNeed(ecards)	return "$" .. ecards[1]:getId()endsgs.jiexian_suit_value = {	spade = 6,	heart = 6}--【昼夜】ai 锁定技 不需要--【红雾】ailocal hongwu_skill = {}hongwu_skill.name = "hongwu"table.insert(sgs.ai_skills, hongwu_skill)function hongwu_skill.getTurnUseCard(self)    if self.player:getMark("@ye")>0 then return nil end    local handcards = sgs.QList2Table(self.player:getCards("he"))    if #handcards==0 then return nil end	self:sortByUseValue(handcards)	reds={}	for _,c in pairs(handcards) do		if c:isRed() then			table.insert(reds,c)		end	end	if #reds<2 then return nil end	use_cards={}	table.insert(use_cards,reds[1]:getId())	table.insert(use_cards,reds[2]:getId())	return sgs.Card_Parse("#hongwu:" .. table.concat(use_cards, "+") .. ":")endsgs.ai_skill_use_func["#hongwu"]=function(card,use,self)	use.card = cardend--【神枪】ailocal shenqiang_skill = {}shenqiang_skill.name = "shenqiang"table.insert(sgs.ai_skills, shenqiang_skill)function shenqiang_skill.getTurnUseCard(self)    if self.player:getMark("@ye")==0 then return nil end    local handcards = sgs.QList2Table(self.player:getCards("he"))    if #handcards==0 then return nil end	self:sortByUseValue(handcards)	reds={}	for _,c in pairs(handcards) do		if c:getSuit()==sgs.Card_Heart or c:isKindOf("Weapon") then			table.insert(reds,c)		end	end	if #reds==0 then return nil end		return sgs.Card_Parse("#shenqiang:" .. reds[1]:getId() .. ":")endsgs.ai_skill_use_func["#shenqiang"] = function(card, use, self)        if #self.enemies==0 then return false end		self:sort(self.enemies,"hp")        		use.card = card         if use.to then				use.to:append(self.enemies[1])				if use.to:length() >= 1 then return end		endend--【夜王】ai 锁定技 不需要--function SmartAI:slashIsEffective--雷米也需要花色--【奥义】ai --1修改fan_skill.getTurnUseCard 冰杀会导致ai发动朱雀羽扇--2 SmartAI:useCardIceSlashsgs.ai_skill_choice.aoyi="aoyo1"--keepvaluesgs.aoyi_keep_value = {	Slash = 7, 	TrickCard = 8}--【失控】ai 锁定技 不需要--需要使用杀的ai吧--【熔毁】ai 锁定技 不需要--对于卖血流要有是否需要保住装备的判断函数吧--【聚变】ai 锁定技 不需要--【恒星】ai 锁定技 不需要--【幻梦】ai 锁定技 不需要-- 1 各种aoe 技能 导致的不必要的出杀 闪--修改了standard_cards-ai.lua里sgs.ai_skill_cardask.aoe --再影响cardask["savage-assault-slash"]--SmartAI:aoeIsEffective--function SmartAI:hasTrickEffective(card, to, from)--SmartAI:slashIsEffective--还要禁止兵粮 铁锁 --优先拆 优先顺  其他可以破坏手牌的角色优先选择萃香--【萃想】ai--如何选牌实在是一门学问。。。不好弄。。。--【虚影】ai --[[相关aiSmartAI:isPriorFriendOfSlash]]sgs.ai_skill_discard.xuying = sgs.ai_skill_discard.gamerule--【狂宴】aisgs.ai_skill_invoke.kuangyan = function(self,data)	if self.player:getMark("@kinki")>0 then return true end	current=self.room:getCurrent()	if self:isFriend(current) and current:getHp()<3 then		return false	end	return trueendsgs.ai_slash_prohibit.kuangyan = function(self, from, to, card)	if to:hasSkill("kuangyan")  and to:getHp()==1 then		local current=self.room:getCurrent()		if  current:isAlive()  and self:isEnemy(current,to)  then 			if self:isFriend(from,to) then				return false			else				return true			end		end	end	return falseend--【毁灭】ailocal huimie_skill = {}huimie_skill.name = "huimie"table.insert(sgs.ai_skills, huimie_skill)function huimie_skill.getTurnUseCard(self)	if self.player:hasUsed("#huimie") then return nil end	return sgs.Card_Parse("#huimie:.:")endsgs.ai_skill_use_func["#huimie"] = function(card, use, self)        self:sort(self.enemies,"hp",true)        targets={}		for _, p in ipairs(self.enemies) do            if not p:isChained()  then    				table.insert(targets,p)			end        end		if #targets >0 then			use.card = card            if use.to then				use.to:append(targets[1])				if use.to:length() >= 1 then return end			end        endend--【禁果】ai--function SmartAI:isWeaksgs.ai_skill_discard.jinguo = sgs.ai_skill_discard.gameruleshicao_find_adjacent = function(room,target) 	local lefter	for _,p in sgs.qlist(room:getOtherPlayers(target)) do		if target:isAdjacentTo(p) then			if target:getSeat()-p:getSeat()==1 then				lefter =p			end			if p:getSeat()-target:getSeat()==room:getOtherPlayers(target):length() then				lefter=p			end		end	end	return lefterendfunction shijian_attack(self)	for _,p in pairs (self.enemies) do		if self:isWeak(p) and self:canAttack(p) then			return true		end	end	return falseend--【时操】ai --【时停】aisgs.ai_skill_invoke.shiting = function(self,data)	local current=self.room:getCurrent() 	if current:hasSkill("changshi") then return true end	local lefter=shicao_find_adjacent(self.room,self.player)	if current:objectName()==lefter:objectName() then		return true	end	if self:isWeak(self.player) then return true end	return shijian_attack(self) end--【幻在】aisgs.ai_skill_invoke.huanzai = function(self,data)	if self:isWeak(self.player) then return true end	return shijian_attack(self) end--【伤魂】aisgs.ai_skill_invoke.shanghun = function(self,data)	if self:isWeak(self.player) then return true end	return shijian_attack(self) end--【半灵】aisgs.ai_skill_choice.banling_plus=function(self, choices)	local x=self.player:getMark("@lingtili")	local y=self.player:getMark("@rentili")	if x>y then		return "rentili"	end	return "lingtili"endsgs.ai_skill_choice.banling_minus=function(self, choices)	local x=self.player:getMark("@lingtili")	local y=self.player:getMark("@rentili")	if x<y then		return "rentili"	end	return "lingtili"end--【人鬼】ai--保持合适血量--function getBestHp(player)sgs.ai_skill_use["@@rengui"] = function(self, prompt)	self:sort(self.friends,"handcard") 	return "#rengui:.:->" .. self.friends[1]:objectName()endsgs.ai_skill_playerchosen.rengui = function(self, targets)	target_table = sgs.QList2Table(targets)	if #target_table==0 then return nil end	local yangchong_target	self:sort(target_table, "handcard")	for _,target in pairs(target_table) do			if self:isEnemy(target) then			return target		end			end	return nilendsgs.ai_card_intention.rengui = -50sgs.ai_playerchosen_intention.rengui = 60--【凝视】ai sgs.ai_skill_discard.ningshi = function(self, discard_num, min_num, optional, include_equip)	local to_discard = {}	if self:touhouHpLocked(self.player) then		return to_discard	end	end	--【高傲】ai 锁定技sgs.ai_trick_prohibit.gaoao = function(self, from, to, card)	if not card:isKindOf("DelayedTrick")  then return false end	if self:isFriend(from,to) then return false end	--回合内可能被【船难】【葛笼】	return to:getPhase() == sgs.Player_NotActiveend--【神授】ai   choices--sgs.ai_card_intention.Slashsgs.ai_skill_choice.shenshou=function(self, choices)	local x=self.player:getTag("shenshou_x"):toInt()	local y=self.player:getTag("shenshou_y"):toInt()	local z=self.player:getTag("shenshou_z"):toInt()	local target=self.player:getTag("shenshou_target"):toPlayer()	local e={}	local e1={}	for _,p in sgs.qlist(self.room:getOtherPlayers(target)) do		if not self:isFriend(p) and target:inMyAttackRange(p) then			table.insert(e,p)			if target:canSlash(p,nil,true) then				table.insert(e1,p)			end		end	end	if z>0 then		return "shenshou_draw"	end	if y>0 then		if #e>0 then return "shenshou_obtain" end	end	if x>0 then		if #e1>0 then return "shenshou_slash" end	end	return "cancel"endlocal shenshou_skill = {}shenshou_skill.name = "shenshou"table.insert(sgs.ai_skills, shenshou_skill)function shenshou_skill.getTurnUseCard(self)	if self.player:hasUsed("#shenshou") then return nil end	local handcards = sgs.QList2Table(self.player:getHandcards())	self:sortByUseValue(handcards)	local cards={}	for _,card in pairs (handcards) do		if card:getNumber()<10 and card:getNumber()>4 then			table.insert(cards,card)		end	end	for _,card in pairs (handcards) do		if (card:isKindOf("Slash") or card:getSuit()==sgs.Card_Spade)and not table.contains(cards,card) then			table.insert(cards,card)		end	end	if #cards>0 then		return sgs.Card_Parse("#shenshou:" .. cards[1]:getEffectiveId() .. ":")	end	if #handcards>0 then		return sgs.Card_Parse("#shenshou:" .. handcards[1]:getEffectiveId() .. ":")	end	return nil endsgs.ai_skill_use_func["#shenshou"] = function(card, use, self)        self:sort(self.friends_noself,"handcard")		if #self.friends_noself >0 then			use.card = card            if use.to then				use.to:append(self.friends_noself[1])				if use.to:length() >= 1 then return end			end        endendsgs.ai_skill_playerchosen.shenshou = function(self, targets)	targets=sgs.QList2Table(targets)	self:sort(targets,"hp")	local shenshou	for _,p in pairs(targets) do		if self:isEnemy(p) then			shenshou=p		end	end	if shenshou then		return shenshou	end	return nilendsgs.shenshou_suit_value = {	spade = 5}sgs.ai_playerchosen_intention.shenshou = 40sgs.ai_use_value.shenshou = 9.2sgs.ai_use_priority.shenshou = 9.2--应该是一个动态值--【神代】ai 锁定技 不需要--【结界】ailocal jiejie_skill = {}jiejie_skill.name = "jiejie"table.insert(sgs.ai_skills, jiejie_skill)jiejie_skill.getTurnUseCard = function(self)	if self.player:hasUsed("#jiejie") then return nil end	local handcards = sgs.QList2Table(self.player:getHandcards())    self:sortByUseValue(handcards)		return sgs.Card_Parse("#jiejie:" .. handcards[1]:getEffectiveId() .. ":")endsgs.ai_skill_use_func["#jiejie"] = function(card, use, self)        targets={}		self:sort(self.enemies, "threat")		for _, p in ipairs(self.enemies) do			table.insert(targets,p)			break        end		self:sort(self.friends, "hp")		for _, p in ipairs(self.friends) do			table.insert(targets,p)			break        end		if #targets >1 then			use.card = card            if use.to then				use.to:append(targets[1])				if use.to:length() >= 1 then return end			end        endend--【封印】aisgs.ai_skill_cardask["@fengyin-discard"] = function(self, data)	targets={}	for _,p in sgs.qlist(self.room:getAlivePlayers())do		if p:getMark("@in_jiejie")>0 and self:isEnemy(p) then			table.insert(targets,p)		end	end	if #targets==0 then return "." end		cards =self.player:getCards("he") 	cards=sgs.QList2Table(cards)	ecards={}	for _,card in pairs(cards) do		if card:getSuit()==sgs.Card_Heart then			table.insert(ecards,card)		end	end		if #ecards==0 then return "." end	self:sortByCardNeed(ecards)	local _data = sgs.QVariant()    _data:setValue(targets[1])	self.player:setTag("fengyin_target",_data)	return "$" .. ecards[1]:getId()endsgs.ai_skill_playerchosen.reimu_fengyin = function(self, targets)	local target=self.player:getTag("fengyin_target"):toPlayer()	self.player:removeTag("fengyin_target")	if target then	return target	end	return nilendsgs.reimu_fengyin_suit_value = {	heart = 5}--【劝诫】aisgs.ai_skill_invoke.ymsndquanjie = function(self,data)	local target=data:toPlayer()	if self:isEnemy(target) then		if target:getHandcardNum()<5 then			for _,p in sgs.qlist(self.room:getAlivePlayers()) do				if self:isFriend(p) and self:isWeak(p) and target:inMyAttackRange(p) then					return true				end			end		end	end	return falseend--【断罪】ai  sgs.ai_skill_invoke.ymsndduanzui = true --【化龙】ai 觉醒技 不需要--【乱舞】ailocal meilingluanwu_skill = {}meilingluanwu_skill.name = "meilingluanwu"table.insert(sgs.ai_skills, meilingluanwu_skill)meilingluanwu_skill.getTurnUseCard = function(self, inclusive)        if not sgs.Slash_IsAvailable(self.player)  then return false end		local cards = self.player:getCards("he")        cards = sgs.QList2Table(cards)        if #cards==0 then return false end		self:sortByUseValue(cards, true)		local red_card=cards[1]        if self.player:getMark("hualong") > 0 then                local suit = red_card:getSuitString()                local number = red_card:getNumberString()                local card_id = red_card:getEffectiveId()                local slash_str = ("slash:meilingluanwu[%s:%s]=%d"):format(suit, number, card_id)                local slash = sgs.Card_Parse(slash_str)                                assert(slash)                return slash		else			local card = sgs.CardList()            for p=1,2,1 do                card:append(cards[p])            end			local slash = sgs.Sanguosha:cloneCard("slash",sgs.Card_SuitToBeDecided, 0)            slash:addSubcards(card)            slash:setSkillName("meilingluanwu")            assert(slash)			return slash        endendsgs.ai_view_as.meilingluanwu = function(card, player, card_place)	local pattern=sgs.Sanguosha:getCurrentCardUsePattern()	if player:getMark("hualong") > 0 then		local suit = card:getSuitString()		local number = card:getNumberString()		local card_id = card:getEffectiveId()		if card_place ~= sgs.Player_PlaceSpecial then			if pattern=="jink" then				return ("jink:meilingluanwu[%s:%s]=%d"):format(suit, number, card_id)			elseif pattern=="slash" then				return ("slash:meilingluanwu[%s:%s]=%d"):format(suit, number, card_id)			end		end	else  		local cards = player:getCards("he")        cards = sgs.QList2Table(cards)        if #cards<2 then return false end		--self:sortByUseValue(cards, true)		--local ecard = sgs.CardList()        --for p=1,2,1 do        --    ecard:append(cards[p])        --end		if pattern=="jink" then				local first_id = cards[1]:getId()			local second_id = cards[2]:getId()			return ("jink:meilingluanwu[%s:%s]=%d+%d"):format("to_be_decided", 0, first_id, second_id)		elseif pattern=="slash" then			local first_id = cards[1]:getId()			local second_id = cards[2]:getId()			return ("slash:meilingluanwu[%s:%s]=%d+%d"):format("to_be_decided", 0, first_id, second_id)					end	end	end--【龙威】ai sgs.ai_skill_invoke.longwei = function(self,data)	local target=data:toPlayer()	if target and self:isEnemy(target) then		return true	end	return falseend--【千年】ai 觉醒技 不需要--【侵略】。。。--【御柱】ai--【超人】--[[相关aiSmartAI:useBasicCardsgs.ai_skill_cardask["duel-slash"]]]local sblchaoren_skill = {}sblchaoren_skill.name = "sblchaoren"table.insert(sgs.ai_skills, sblchaoren_skill)sblchaoren_skill.getTurnUseCard = function(self, inclusive)        local acard = sgs.Sanguosha:getCard(self.room:getDrawPile():first())  		if not acard:isAvailable(self.player) then return false end		local suit =acard:getSuitString()		local number = acard:getNumberString()		local card_id = acard:getEffectiveId()        local slash_str = (acard:objectName()..":sblchaoren[%s:%s]=%d"):format(suit, number, card_id) 			local slash = sgs.Card_Parse(slash_str)                        assert(slash)        return slash		end--[[sgs.ai_view_as.sblchaoren = function(card, player, card_place)	local room=player:getRoom()	local acard = sgs.Sanguosha:getCard(room:getDrawPile():first())  	local suit =acard:getSuitString()	local number = acard:getNumberString()    local card_id = acard:getEffectiveId()		return (acard:objectName()..":sblchaoren[%s:%s]=%d"):format(suit, number, card_id) 	end]]function sgs.ai_cardsview_valuable.sblchaoren(self, class_name, player)	local acard = sgs.Sanguosha:getCard(self.room:getDrawPile():first())  	local suit =acard:getSuitString()	local number = acard:getNumberString()    local card_id = acard:getEffectiveId()	--杀包含属性杀 所以单独分开	if class_name == "Slash" and acard:isKindOf("Slash") then		return (acard:objectName()..":sblchaoren[%s:%s]=%d"):format(suit, number, card_id) 	end	if acard:isKindOf(class_name) then		return (acard:objectName()..":sblchaoren[%s:%s]=%d"):format(suit, number, card_id) 	endend--【表象】ai 觉醒技 不需要--【释放】ai 觉醒技 不需要--【抑制】ai 觉醒技 不需要--【自我】ailocal ziwo_skill = {}ziwo_skill.name = "ziwo"table.insert(sgs.ai_skills, ziwo_skill)ziwo_skill.getTurnUseCard = function(self)	if not self.player:isWounded() then return nil end	cards =sgs.QList2Table(self.player:getCards("h"))	if #cards<2 then return nil end	self:sortByKeepValue(cards)	use_cards={}	table.insert(use_cards,cards[1]:getId())	table.insert(use_cards,cards[2]:getId())	return sgs.Card_Parse("#ziwo:" .. table.concat(use_cards, "+") .. ":")	--return sgs.Card_Parse("#ziwo:.:")endsgs.ai_skill_use_func["#ziwo"]=function(card,use,self)	use.card = cardend--【本我】aisgs.ai_skill_invoke.benwo = function(self,data)	local target=self.player:getTag("benwo_target"):toPlayer()	if not target then return true end	if self:isFriend(target) then		return false	else		return true	endendsgs.ai_skill_discard.benwo = sgs.ai_skill_discard.gamerule--【超我】ai--[[sgs.ai_skill_cardask["chaowo"] = function(self)        local cards = sgs.QList2Table(self.player:getCards("h"))		self:sortByKeepValue(cards)        return "$" .. cards[1]:getId()end]]--[[sgs.ai_skill_playerchosen.chaowo = function(self, targets)	target_table = self:getFriends(self.player)	if #target_table==0 then return false end	self:sort(target_table, "value")	for _,target in pairs(target_table) do			if  target:getMaxHp()==3 then			return target		end		if self:isWeak(target) and not self:isWeak(self.player) then			return target		end	end	return self.playerend]]sgs.ai_skill_use["@@chaowo"] = function(self, prompt)	local target	target_table = self:getFriends(self.player)	if #target_table==0 then return "." end	self:sort(target_table, "value")	for _,p in pairs(target_table) do			if  p:getMaxHp()==3 then			 target=p		end		if self:isWeak(p) and not self:isWeak(self.player) then			 target=p		end	end	if not target then		target= self.player	end	if target  then		local cards = self.player:getHandcards()		cards = sgs.QList2Table(cards)		self:sortByKeepValue(cards)		return "#chaowo:" ..cards[1]:getEffectiveId().. ":->" .. target:objectName()	end	return "."end--sgs.ai_playerchosen_intention.chaowo = -60sgs.ai_card_intention.chaowo = -60--嘲讽值设定sgs.ai_chaofeng.shen000 = 5  --zun 你必须高嘲讽 sgs.ai_chaofeng.shen001 = 2sgs.ai_chaofeng.shen002 = 1sgs.ai_chaofeng.shen003 = -1sgs.ai_chaofeng.shen004 = 2sgs.ai_chaofeng.shen005 = 4sgs.ai_chaofeng.shen006 = 1sgs.ai_chaofeng.shen007 = 0sgs.ai_chaofeng.shen008 = 0sgs.ai_chaofeng.shen009 = 2sgs.ai_chaofeng.shen010 = 2sgs.ai_chaofeng.shen011 = 0sgs.ai_chaofeng.shen012 = 0sgs.ai_chaofeng.shen013 = -1sgs.ai_chaofeng.shen014 = 1sgs.ai_chaofeng.shen015 = 0sgs.ai_chaofeng.shen016 = 1sgs.ai_chaofeng.shen017 = -2